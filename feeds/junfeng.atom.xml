<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>jf.h</title><link href="http://blog.junfeng.ca/" rel="alternate"></link><link href="http://blog.junfeng.ca/feeds/junfeng.atom.xml" rel="self"></link><id>http://blog.junfeng.ca/</id><updated>2015-06-28T20:20:58+08:00</updated><entry><title>C++ link and library usage</title><link href="http://blog.junfeng.ca/c-link-and-library-usage.html" rel="alternate"></link><updated>2015-06-28T20:20:58+08:00</updated><author><name>junfeng</name></author><id>tag:blog.junfeng.ca,2015-06-28:c-link-and-library-usage.html</id><summary type="html">&lt;p&gt;When use a programming language produtively,
We need use third parties libraries.&lt;/p&gt;
&lt;p&gt;If we install libraries and header files in
/usr/lib, /usr/local/lib and /usr/include/,
/usr/local/include, compilers will find them automatically.
But when libraries and headers are not in system paths, How
do you tell compilers to find them.&lt;/p&gt;
&lt;p&gt;The answer is using compiler flags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-I&lt;/code&gt; adds headers search paths&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-L&lt;/code&gt; adds lib search paths&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt; adds lib files, includes dynamic and static libs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-Wl,-rpath,shared_path&lt;/code&gt; adds shared_path to rpath&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These flags control compilers how to find libraries you use.
Just like Java's class path.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;note: when use dynamic link, you should set rpath(RUNTIME SEARCH PATH)&lt;/em&gt;
&lt;em&gt;proporly, otherwise when executes, your program would't find shared&lt;/em&gt;
&lt;em&gt;libraries not located in system link path.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But the above way is a low level approach. More convenient way
is using Makefile with pkg-config tool. pkg-config can read config
files and provides compiler flags about a library.&lt;/p&gt;
&lt;p&gt;The most simple way is using CMake, CMake provides many commands to
find the library you are working with, and it is so convenient that
CMake provides lots of varaibles you can add paths for CMake to search.&lt;/p&gt;
&lt;p&gt;Some useful commands include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;include_directories&lt;/code&gt;, adds header files search path.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find_library&lt;/code&gt;, find library files for linking.&lt;/li&gt;
&lt;li&gt;some varaibles about rpath:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_RPATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_RPATH_USE_LINK_PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMAKE_BUILD_WITH_INSTALL_RPATH&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;References:&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.rapidtables.com/code/linux/gcc.htm"&gt;http://www.rapidtables.com/code/linux/gcc.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://manned.org/pkg-config.1"&gt;http://manned.org/pkg-config.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Rpath"&gt;https://en.wikipedia.org/wiki/Rpath&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cmake.org/documentation/"&gt;http://www.cmake.org/documentation/&lt;/a&gt;&lt;/p&gt;</summary><category term="C++"></category><category term="CMake"></category></entry><entry><title>backslash in C++</title><link href="http://blog.junfeng.ca/backslash-in-c.html" rel="alternate"></link><updated>2015-06-21T18:24:19+08:00</updated><author><name>junfeng</name></author><id>tag:blog.junfeng.ca,2015-06-21:backslash-in-c.html</id><summary type="html">&lt;p&gt;Use backslash to format long long lines. Oops, I nerver use it in C++.&lt;/p&gt;
&lt;p&gt;How to use backslash?&lt;/p&gt;
&lt;p&gt;This is an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
            &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fffff&amp;quot;&lt;/span&gt; \
                     &lt;span class="s"&gt;&amp;quot;fffff&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// right&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fffff&amp;quot;&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;fffff&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// right&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\u4f60\u597d&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* std::string s3 = &amp;quot;\u4f60\u&amp;quot; \&lt;/span&gt;
&lt;span class="cm"&gt;                      &amp;quot;597d&amp;quot;; wrong&lt;/span&gt;
&lt;span class="cm"&gt;    std::string s3 = &amp;quot;\u4f60\u&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt;        &amp;quot;597d&amp;quot;; wrong&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;你好&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;s3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;s4&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Maybe from now I need write one variable in one line, and document every variable.&lt;/p&gt;
&lt;p&gt;Hope I can get &lt;em&gt;clean code&lt;/em&gt;&lt;/p&gt;</summary><category term="backslash"></category><category term="C++"></category></entry><entry><title>PEPS doc Kindle版本</title><link href="http://blog.junfeng.ca/peps-doc-kindleban-ben.html" rel="alternate"></link><updated>2015-06-09T22:07:32+08:00</updated><author><name>junfeng</name></author><id>tag:blog.junfeng.ca,2015-06-09:peps-doc-kindleban-ben.html</id><summary type="html">&lt;h3&gt;介绍&lt;/h3&gt;
&lt;p&gt;Python上遇到的很多问题搜到最后经常链接到PEP, 觉得PEPS需要研读一下.
一时半会儿看不完的东西总想着放到Kindle里看(很有可能不会再看), 于是
就制作了这个mobi版本的Python Enhancement Proposals.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/grepcook/peps_mobi/master/Python%20Enhancement%20Proposals.mobi"&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;过程&lt;/h3&gt;
&lt;p&gt;hg clone下来, 然后转成html. 使用&lt;a href="https://github.com/grepcook/peps_mobi/blob/master/pep2mobi.py"&gt;代码&lt;/a&gt;解析html, 用kindlegen生成
mobi文件.&lt;/p&gt;
&lt;p&gt;吐槽:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Python官方积极推动代码移植到Python 3, 可peps中的转换代码都是
   老版本的Python 2&lt;/li&gt;
&lt;li&gt;kindlegen的&lt;code&gt;-c2&lt;/code&gt;选项很占用CPU, 且处理时间臭长, 但生成文件体积
   变化并不大&lt;/li&gt;
&lt;li&gt;PEP的两种格式处理起来带来不少麻烦, 并且其生成的html文档结构
   很简单, 没有程序处理需要的元信息.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;TODO&lt;/h3&gt;
&lt;p&gt;本来应该按照分类做成类似期刊格式的文档, 但时间不够用, 没有制作
期刊的模板, 以后有时间再做.&lt;/p&gt;
&lt;p&gt;应该免去转成html那一步, 直接利用原生格式, 需要学习PEP文档的两种
格式.&lt;/p&gt;
&lt;p&gt;Python应该统一PEP格式, 把两种格式使用程序转成一种.&lt;/p&gt;</summary><category term="Python"></category><category term="Kindle"></category></entry><entry><title>OAuth 2.0 Bearer Token Usage</title><link href="http://blog.junfeng.ca/oauth-20-bearer-token-usage.html" rel="alternate"></link><updated>2015-06-08T16:17:44+08:00</updated><author><name>junfeng</name></author><id>tag:blog.junfeng.ca,2015-06-08:oauth-20-bearer-token-usage.html</id><summary type="html">&lt;h3&gt;引入&lt;/h3&gt;
&lt;p&gt;在给Tornado编写豆瓣API的类时, 在查看文档时, 发现其access_token
并不像其它网站那样是传在query或者body中的. 而是放入headers中.
即: &lt;code&gt;headers["Authorization"] = Bearer &amp;lt;access_token&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;搜索OAuth2.0 Bearer, 在RFC 6750中找到了详细介绍&lt;/p&gt;
&lt;h3&gt;使用access_token方法&lt;/h3&gt;
&lt;p&gt;标准中给出了3种access_token的使用方法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用headers的Authorization字段(格式如上)&lt;/li&gt;
&lt;li&gt;form字段形式放入POST请求的body中&lt;/li&gt;
&lt;li&gt;query形式放入url中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;标准推荐使用第一种方法. 第三种并不推荐, 因为access_token有可能泄漏.&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;p&gt;http://self-issued.info/docs/draft-ietf-oauth-v2-bearer.html&lt;/p&gt;</summary><category term="OAuth2.0"></category><category term="Bearer"></category></entry><entry><title>right click menu items</title><link href="http://blog.junfeng.ca/right-click-menu-items.html" rel="alternate"></link><updated>2015-05-16T18:42:50+08:00</updated><author><name>junfeng</name></author><id>tag:blog.junfeng.ca,2015-05-16:right-click-menu-items.html</id><summary type="html">&lt;p&gt;The list of program that is displayed when right-clicking on a file in PCManFM is the combination of:
mimeinfo.cache
mimeapps.list
The default program that is launched when you double-click on a file in PCManFM is (first match wins):
The one from ~/.local/share/applications/mimeapps.list
The one from ~/.local/share/applications/defaults.list
The one from /usr/local/share/applications/defaults.list
The one from /usr/share/applications/defaults.list
The first one from /usr/share/applications/mimeinfo.cache&lt;/p&gt;
&lt;p&gt;From https://lkubaski.wordpress.com/2012/10/29/understanding-file-associations-in-lxde-and-pcmanfm/&lt;/p&gt;</summary><category term="mime"></category><category term="desktop"></category></entry><entry><title>The Little Redis Book 笔记</title><link href="http://blog.junfeng.ca/the-little-redis-book-bi-ji.html" rel="alternate"></link><updated>2015-04-15T12:25:16+08:00</updated><author><name>junfeng</name></author><id>tag:blog.junfeng.ca,2015-04-15:the-little-redis-book-bi-ji.html</id><summary type="html">&lt;p&gt;query limitations, data structures and Redis' way to store data in memory&lt;/p&gt;
&lt;h3&gt;strings&lt;/h3&gt;
&lt;p&gt;use cases: storing objects (complex or not) and counters&lt;/p&gt;
&lt;h3&gt;hashes&lt;/h3&gt;
&lt;p&gt;hash suits for structed objects
hash implemention&lt;/p&gt;
&lt;h3&gt;sets&lt;/h3&gt;
&lt;p&gt;in op is O(1)?&lt;/p&gt;
&lt;p&gt;use cases: Sets are great for tagging or tracking any other properties
of a value for which duplicates don't make any sense
(or where we want to apply set operations such as intersections and unions).&lt;/p&gt;
&lt;h3&gt;sorted sets&lt;/h3&gt;
&lt;p&gt;hashes are like strings but with fields,
then sorted sets are like sets but with a score&lt;/p&gt;
&lt;p&gt;use cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;leaderboard system&lt;/li&gt;
&lt;li&gt;anything you want sorted by an some integer,
  and be able to efficiently manipulate based on that score,&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Pseudo Multi Key Queries&lt;/h3&gt;
&lt;p&gt;using hashes to make querying a little easier&lt;/p&gt;
&lt;h3&gt;References and Indexes&lt;/h3&gt;
&lt;p&gt;manage/update/delete these references manually is defficult&lt;/p&gt;
&lt;h3&gt;Round Trips and Pipelining&lt;/h3&gt;
&lt;h3&gt;Transactions&lt;/h3&gt;
&lt;p&gt;Every Redis command is atomic, including the ones that do multiple things.
Additionally, Redis has support for transactions when using multiple commands.&lt;/p&gt;
&lt;p&gt;Redis is actually single-threaded,
which is how every command is guaranteed to be atomic&lt;/p&gt;
&lt;p&gt;starts &lt;em&gt;multi&lt;/em&gt; then some &lt;em&gt;commands&lt;/em&gt; ends with exec or discard&lt;/p&gt;
&lt;h3&gt;Expiration&lt;/h3&gt;
&lt;p&gt;commands:
- EXPIRE
- EXPIREAT
- TTL
- PERSIST
- SETEX&lt;/p&gt;
&lt;p&gt;ideal caching engine&lt;/p&gt;
&lt;h3&gt;Lua Scripting&lt;/h3&gt;
&lt;p&gt;keys with a TTL won't expire half-way through script execution&lt;/p&gt;
&lt;p&gt;&lt;em&gt;lua-time-limit&lt;/em&gt; defines how long a Lua script is allowed to
execute before being terminated. Default is 5 seconds.&lt;/p&gt;
&lt;h3&gt;Replication&lt;/h3&gt;
&lt;p&gt;Redis replication doesn't yet provide automated failover,
If the master dies, a slave needs to be manually promoted&lt;/p&gt;
&lt;p&gt;Some commands are more expensive than others (sort for example)
and offloading their execution to a slave can keep the overall
system responsive to incoming queries&lt;/p&gt;
&lt;h3&gt;Backups&lt;/h3&gt;
&lt;p&gt;disable both snapshotting and the append-only file (aof) on
the master and let a slave take care of this&lt;/p&gt;
&lt;h3&gt;Redis Cluster&lt;/h3&gt;
&lt;p&gt;Not only will this offer horizontal scaling, including rebalancing,
but it'll also provide automated failover for high availability.&lt;/p&gt;
&lt;h3&gt;End&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Redis is easy to learn&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;the real benefits Redis has to offer with its simplicity&lt;/em&gt;&lt;/p&gt;</summary><category term="Redis"></category><category term="learning"></category></entry><entry><title>unpv13e chapter 3 notes</title><link href="http://blog.junfeng.ca/unpv13e-chapter-3-notes.html" rel="alternate"></link><updated>2014-07-03T14:45:00+08:00</updated><author><name>junfeng</name></author><id>tag:blog.junfeng.ca,2014-07-03:unpv13e-chapter-3-notes.html</id><summary type="html">&lt;h3&gt;IPv4 Socket Address Structure&lt;/h3&gt;
&lt;p&gt;&lt;img alt="sockaddr_in.png" src="./images/sockaddr_in.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Datatypes required by the POSIX specification&lt;/h3&gt;
&lt;p&gt;&lt;img alt="datatypes.png" src="./images/datatypes.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Generic Socket Address Structure&lt;/h3&gt;
&lt;p&gt;&lt;img alt="sockaddr.png" src="./images/sockaddr.png" /&gt;&lt;/p&gt;
&lt;h3&gt;IPv6 Socket Address Structure&lt;/h3&gt;
&lt;p&gt;&lt;img alt="sockaddr_in6.png" src="./images/sockaddr_in6.png" /&gt;&lt;/p&gt;
&lt;h3&gt;New Generic Socket Address Structure&lt;/h3&gt;
&lt;p&gt;&lt;img alt="sockaddr_storage.png" src="./images/sockaddr_storage.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Comparison of various socket address structures.&lt;/h3&gt;
&lt;p&gt;&lt;img alt="sockaddr_comparison.png" src="./images/sockaddr_comparison.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Byte Ordering Functions&lt;/h3&gt;
&lt;p&gt;&lt;img alt="byte_ordering_functions.png" src="./images/byte_ordering_functions.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Convert Addresses Between ASCII Strings And Network Byte Ordered Binary Values&lt;/h3&gt;
&lt;h5&gt;Old Functions:&lt;/h5&gt;
&lt;p&gt;&lt;img alt="inet_aton-inet_addr-inet_ntoa.png" src="./images/inet_aton-inet_addr-inet_ntoa.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;note 1: INADDR_NONE is typically 32 one-bits, so inet_addr cannot convert string 255.255.255.255&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;note 2: inet_ntoa's return value is in static memory, so it is not reentrant&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;note 3: inet_ntoa takes structures as it's argument, not a point&lt;/em&gt;&lt;/p&gt;
&lt;h5&gt;New Functions:&lt;/h5&gt;
&lt;p&gt;&lt;img alt="inet_pton-inet_ntop.png" src="./images/inet_pton-inet_ntop.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#define INET_ADDRSTRLEN 16 /* for IPv4 dotted-decimal */&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#define INET6_ADDRSTRLEN 46 /* for IPv6 hex string */&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;Summary of address conversion functions&lt;/h5&gt;
&lt;p&gt;&lt;img alt="address_conversion_functions.png" src="./images/address_conversion_functions.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Exercises&lt;/h2&gt;
&lt;p&gt;3.1 In C the function can modify arguments only if arguments passed by reference.&lt;/p&gt;
&lt;p&gt;3.2 because &lt;code&gt;sizeof(char)&lt;/code&gt; is one byte, read or write n chars equals n bytes data.&lt;/p&gt;
&lt;p&gt;3.3&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*inet_pton_loose&lt;/span&gt;
&lt;span class="cm"&gt; * author: junfeng*/&lt;/span&gt;

&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;inet_pton_loose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;family&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;strptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;addrptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/*test*/&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;in_addr&lt;/span&gt; &lt;span class="n"&gt;a_in4_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;in6_addr&lt;/span&gt; &lt;span class="n"&gt;a_in6_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;str_addr4&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;INET_ADDRSTRLEN&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;str_addr6&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;INET6_ADDRSTRLEN&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Usage:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;%s str_addr&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inet_pton_loose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a_in4_addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;inet_ntop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a_in4_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str_addr4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;INET_ADDRSTRLEN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a_in4_addr: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str_addr4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inet_pton_loose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a_in6_addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;inet_ntop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a_in6_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str_addr6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;INET6_ADDRSTRLEN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a_in6_addr: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str_addr6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;inet_pton_loose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;family&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;strptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;addrptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inet_pton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;family&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addrptr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;in_addr&lt;/span&gt; &lt;span class="n"&gt;in_val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inet_aton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;in_val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;family&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addrptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;in_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;in_addr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;family&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;AF_INET6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;in6_addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;in_addr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addrptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addrptr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;\
                        &lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addrptr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;in_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;in_addr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="unpv13e"></category><category term="notes"></category></entry><entry><title>mount and grep</title><link href="http://blog.junfeng.ca/mount-and-grep.html" rel="alternate"></link><updated>2014-06-08T21:45:00+08:00</updated><author><name>junfeng</name></author><id>tag:blog.junfeng.ca,2014-06-08:mount-and-grep.html</id><summary type="html">&lt;h2&gt;mount options&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mount&lt;/code&gt;display current partions mount options.
Output like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/dev/sda2 on /home type ext4 (rw,relatime,data=ordered)
/dev/sda5 on /media/sda5 type ext4 (rw,nosuid,nodev,noexec,relatime,data=ordered,user)
/dev/sda7 on /media/sda7 type ext4 (rw,nosuid,nodev,noexec,relatime,data=ordered,user)
/dev/sda6 on /media/sda6 type ext4 (rw,nosuid,nodev,noexec,relatime,data=ordered,user)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if you run a executable program on a partion with settiong noexec mount options, this program will not execute.&lt;/p&gt;
&lt;p&gt;And you got error message like &lt;code&gt;bash: ./a.out: Permission denied&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you have a program that opens exec bit flag, but it can't run, even you have corret permission.&lt;/p&gt;
&lt;p&gt;then &lt;code&gt;mount&lt;/code&gt; check mount options of the partion the program run on. Maybe just because you didn't open exec mount option.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Caution:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;if you set partions auto mount on /et/fstab, check whether you set user mount option.&lt;/p&gt;
&lt;p&gt;according the mount man page says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Allow an ordinary user to mount the filesystem.
  The name of the mounting user is written to mtab so that he can unmount the filesystem again.
  This option implies the options noexec, nosuid, and nodev (unless overridden by subsequent options,
  as in the option line user,exec,dev,suid).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So if you want programs can run on these auto mount partions, add exec option if you setted user option.&lt;/p&gt;
&lt;h2&gt;grep options&lt;/h2&gt;
&lt;p&gt;If you want to search some words like &lt;code&gt;X-Forwarded-For&lt;/code&gt; recursively, you type
&lt;code&gt;grep -i "X-Forwarded-For" -r *&lt;/code&gt;. It works, but search every type files.&lt;/p&gt;
&lt;p&gt;Maybe you want to recursively search just some type files like "*.py".&lt;/p&gt;
&lt;p&gt;Type &lt;code&gt;grep -i "X-Forwarded-For" -r *.py&lt;/code&gt; is a naturaly derivation. But It doesn't work.
It equals to &lt;code&gt;grep -i "X-Forwarded-For" *.py&lt;/code&gt;, just search current directory "*.py" files.&lt;/p&gt;
&lt;p&gt;The right solution is:
&lt;code&gt;grep -i "X-Forwarded-For" --include=*.py -r&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;recursively search *.py files for &lt;code&gt;X-Forwarded-For&lt;/code&gt;&lt;/p&gt;</summary><category term="mount"></category><category term="grep"></category></entry><entry><title>unpv13e chapter 2 notes</title><link href="http://blog.junfeng.ca/unpv13e-chapter-2-notes.html" rel="alternate"></link><updated>2014-06-08T15:41:00+08:00</updated><author><name>junfeng</name></author><id>tag:blog.junfeng.ca,2014-06-08:unpv13e-chapter-2-notes.html</id><summary type="html">&lt;h2&gt;Overview of TCP/IP protocols.&lt;/h2&gt;
&lt;p&gt;&lt;img alt="unpv1_overview_TCP_IP_protocols.png" src="./images/unpv1_overview_TCP_IP_protocols.png" /&gt;&lt;/p&gt;
&lt;h2&gt;TCP&lt;/h2&gt;
&lt;h3&gt;Three-Way Handshake&lt;/h3&gt;
&lt;p&gt;&lt;img alt="TCP_three_way_handshake.png" src="./images/TCP_three_way_handshake.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Packets exchanged when a TCP connection is closed.&lt;/h3&gt;
&lt;p&gt;&lt;img alt="packets_exchange_when_TCP_connections_terminal.png" src="./images/packets_exchange_when_TCP_connections_terminal.png" /&gt;&lt;/p&gt;
&lt;h3&gt;TCP State Transition Diagram&lt;/h3&gt;
&lt;p&gt;&lt;img alt="TCP_State_Transition_Diagram.png" src="./images/TCP_State_Transition_Diagram.png" /&gt;&lt;/p&gt;
&lt;h3&gt;TIME_WAIT State&lt;/h3&gt;
&lt;p&gt;Time: 2MSL&lt;/p&gt;
&lt;p&gt;Reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To implement TCP's full-duplex connection termination reliably&lt;/li&gt;
&lt;li&gt;To allow old duplicate segments to expire in the network&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SCTP&lt;/h2&gt;
&lt;h3&gt;SCTP four-way handshake&lt;/h3&gt;
&lt;p&gt;&lt;img alt="SCTP_four_way_handshake.png" src="./images/SCTP_four_way_handshake.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Packets exchanged when an SCTP association is closed&lt;/h3&gt;
&lt;p&gt;&lt;img alt="packets_exchanged_when_an_SCTP_association_is_closed.png" src="./images/packets_exchanged_when_an_SCTP_association_is_closed.png" /&gt;&lt;/p&gt;
&lt;p&gt;SCTP does not permit a "half-closed" association, does not have a TIME_WAIT state.&lt;/p&gt;
&lt;h3&gt;SCTP State Transition Diagram&lt;/h3&gt;
&lt;p&gt;&lt;img alt="SCTP_State_Transition_Diagram.png" src="./images/SCTP_State_Transition_Diagram.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Socket Pair&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TCP: the local IP address, local port, foreign IP address, and foreign port&lt;/li&gt;
&lt;li&gt;SCTP: a set of local IP addresses, a local port, a set of foreign IP
  addresses, and a foreign port&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Headers&lt;/h2&gt;
&lt;h3&gt;IPv4 Header&lt;/h3&gt;
&lt;p&gt;&lt;img alt="IPv4_header.png" src="./images/IPv4_header.png" /&gt;&lt;/p&gt;
&lt;h3&gt;IPv6 Header&lt;/h3&gt;
&lt;p&gt;&lt;img alt="IPv6_header.png" src="./images/IPv6_header.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Buffer Sizes and Limitations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The maximum size of an IPv4 datagram is 65,535 bytes, including the IPv4
  header.&lt;/li&gt;
&lt;li&gt;The maximum size of an IPv6 datagram is 65,575 bytes, including the 40-byte
  IPv6 header.&lt;/li&gt;
&lt;li&gt;Many networks have an MTU which can be dictated by the hardware.&lt;ul&gt;
&lt;li&gt;Ethernet MTU: 1500 bytes&lt;/li&gt;
&lt;li&gt;point-to-point links using the Point-to-Point Protocol (PPP): configurable MTU&lt;/li&gt;
&lt;li&gt;Older SLIP links often used an MTU of 1,006 or 296 bytes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The minimum link MTU for IPv4 is 68 bytes (maximum-sized IPv4 header 60  and minimum-sized fragment).&lt;/li&gt;
&lt;li&gt;The minimum link MTU for IPv6 is 1,280 bytes.&lt;/li&gt;
&lt;li&gt;he smallest MTU in the path between two hosts is called the path MTU.&lt;/li&gt;
&lt;li&gt;minimum reassembly buffer size: IPv4 576 bytes, IPv6 1500 bytes&lt;/li&gt;
&lt;li&gt;TCP has a maximum segment size (MSS) that announces to the peer TCP the
  maximum amount of TCP data that the peer can send per segment.&lt;/li&gt;
&lt;li&gt;SCTP keeps a fragmentation point based on the smallest path MTU found to all
  the peer's addresses.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note:
&lt;em&gt;Pv6 payload length field does not include the size of the IPv6header,&lt;/em&gt;
&lt;em&gt;while the IPv4 total length field does include the header size.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Retransmission&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Positive Acknowledgement&lt;/li&gt;
&lt;li&gt;Negative Acknowledgment&lt;/li&gt;
&lt;li&gt;Selective Acknowledgment&lt;/li&gt;
&lt;li&gt;Cumulative Acknowledgment&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Exercise&lt;/h2&gt;
&lt;h3&gt;2.1&lt;/h3&gt;
&lt;p&gt;version 0-1: Reserved&lt;/p&gt;
&lt;p&gt;version 2-3: Unassigned&lt;/p&gt;
&lt;p&gt;version 5: Internet Stream Protocol&lt;/p&gt;
&lt;h3&gt;2.2&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://tools.ietf.org/html/rfc1190"&gt;rfc1190&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Internet_Stream_Protocol"&gt;Internet_Stream_Protocol&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;2.3&lt;/h3&gt;
&lt;p&gt;The minimum reassembly buffer size for IPv4 is 576, it minus the 20-byte IPv4 header and minus
the 20-byte TCP header is 536&lt;/p&gt;
&lt;h3&gt;2.4&lt;/h3&gt;
&lt;p&gt;&lt;img alt="2.4.jpeg" src="./images/2.4.jpeg" /&gt;&lt;/p&gt;
&lt;h3&gt;2.5&lt;/h3&gt;
&lt;p&gt;Token ring host can't send packets more than 1460 bytes of data, because peer MSS was 1460.
Ethernet host can send no more than 4096 bytes data, but it's MTU is 1500 bytes, it will not exceed the MTU of the
outgoing interface (the Ethernet) to avoid fragmentation. There for the max length of data is 1460 (1500-20-20)&lt;/p&gt;
&lt;h3&gt;2.6&lt;/h3&gt;
&lt;p&gt;89&lt;/p&gt;
&lt;h3&gt;2.7&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A selective acknowledgment only indicates that the data covered by the
sequence numbers reflected in the selective acknowledgment message was
received. Only a cumulative acknowledgment says that the data up to and
including the sequence number in the cumulative acknowledgment message
was received. When freeing data from the send buffer based on a selective
acknowledgment, the system may only free the exact data that was
acknowledged, and not any before or after the selective acknowledgment.&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="unpv13e"></category><category term="notes"></category></entry><entry><title>Debian 环境下的 beaglebone black NFS client 配置</title><link href="http://blog.junfeng.ca/debian-huan-jing-xia-de-beaglebone-black-nfs-client-pei-zhi.html" rel="alternate"></link><updated>2014-06-07T11:36:00+08:00</updated><author><name>junfeng</name></author><id>tag:blog.junfeng.ca,2014-06-07:debian-huan-jing-xia-de-beaglebone-black-nfs-client-pei-zhi.html</id><summary type="html">&lt;p&gt;不知什么时候手贱把beaglebone black刷成了Debian(Archlinux 没刷成功), 然后就放那了.&lt;/p&gt;
&lt;p&gt;今天要做实验, 就搭了下NFS.&lt;/p&gt;
&lt;p&gt;NFS Server 使用 Archlinux, 配置参见&lt;a href="https://wiki.archlinux.org/index.php/Nfs"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;client 使用 Debian. 需要安装 nfs-common package&lt;/p&gt;
&lt;p&gt;配置 BB-black 联网:&lt;/p&gt;
&lt;p&gt;在板子下输入命令:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/sbin/route add default gw 192.168.7.1
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nameserver 114.114.114.114&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/resolv.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在宿主机上输入:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo iptables -A POSTROUTING -t nat -j MASQUERADE
&lt;span class="nb"&gt;echo &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee /proc/sys/net/ipv4/ip_forward &amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ping 你喜爱的网站查看是否能成功．&lt;/p&gt;
&lt;p&gt;联网后:
&lt;code&gt;vim /etc/apt/sources.list&lt;/code&gt; 添加以下几行软件源:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;deb http://mirrors.ustc.edu.cn/debian stable main contrib non-free
  deb-src http://mirrors.ustc.edu.cn/debian stable main contrib non-free
  deb http://mirrors.ustc.edu.cn/debian stable-proposed-updates main contrib non-free
  deb-src http://mirrors.ustc.edu.cn/debian stable-proposed-updates main contrib non-free&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;aptitude update&lt;/code&gt; 更新 packages list
执行 &lt;code&gt;aptitude -y install nfs-common&lt;/code&gt; 安装 所需软件包.
然后 &lt;code&gt;mount -t nfs 192.168.7.1:/srv/nfs4/BBB nfs4&lt;/code&gt; 挂载即可&lt;/p&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://www.server-world.info/en/note?os=Debian_7.0&amp;amp;p=nfs&amp;amp;f=2&lt;/li&gt;
&lt;li&gt;https://lug.ustc.edu.cn/wiki/mirrors/help/debian&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Debian"></category><category term="NFS"></category></entry><entry><title>unpv13e chapter 1 notes</title><link href="http://blog.junfeng.ca/unpv13e-chapter-1-notes.html" rel="alternate"></link><updated>2014-06-04T14:16:00+08:00</updated><author><name>junfeng</name></author><id>tag:blog.junfeng.ca,2014-06-04:unpv13e-chapter-1-notes.html</id><summary type="html">&lt;h2&gt;struct sockaddr&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Everytime one of the socket functions requires a pointer to a
  socket address structure, that pointer must be cast to a pointer to a generic socket
  address structure. This is because the socket functions predate the ANSI C standard,
  so the void * pointer type was not available in the early 1980s when these functions
  were developed.[p41]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;server model&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;iterative server&lt;/li&gt;
&lt;li&gt;concurrent server&lt;ul&gt;
&lt;li&gt;one process per client(creating one child process for each client)&lt;/li&gt;
&lt;li&gt;one thread per client&lt;/li&gt;
&lt;li&gt;pre-fork a fixed number process or threads&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;OSI model and Internet protocol suite&lt;/h2&gt;
&lt;p&gt;&lt;img alt="img" src="./images/osi_mode_and_internet_protocol.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Linux derived from Minix&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;We also note that Linux, a popular, freely
  available implementation of Unix, does not fit into the Berkeley-derived classification:
  Its networking code and sockets API were developed from scratch.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Exercises&lt;/h2&gt;
&lt;h3&gt;1.3&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;errno: 97 socket error: Address family not supported by protocol&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;define AF_* at include/linux/socket.h&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* Supported address families. */&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_UNSPEC   0&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_UNIX     1   &lt;/span&gt;&lt;span class="cm"&gt;/* Unix domain sockets      */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_LOCAL    1   &lt;/span&gt;&lt;span class="cm"&gt;/* POSIX name for AF_UNIX   */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_INET     2   &lt;/span&gt;&lt;span class="cm"&gt;/* Internet IP Protocol     */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_AX25     3   &lt;/span&gt;&lt;span class="cm"&gt;/* Amateur Radio AX.25      */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_IPX      4   &lt;/span&gt;&lt;span class="cm"&gt;/* Novell IPX           */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_APPLETALK    5   &lt;/span&gt;&lt;span class="cm"&gt;/* AppleTalk DDP        */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_NETROM   6   &lt;/span&gt;&lt;span class="cm"&gt;/* Amateur Radio NET/ROM    */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_BRIDGE   7   &lt;/span&gt;&lt;span class="cm"&gt;/* Multiprotocol bridge     */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_ATMPVC   8   &lt;/span&gt;&lt;span class="cm"&gt;/* ATM PVCs         */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_X25      9   &lt;/span&gt;&lt;span class="cm"&gt;/* Reserved for X.25 project    */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_INET6    10  &lt;/span&gt;&lt;span class="cm"&gt;/* IP version 6         */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_ROSE     11  &lt;/span&gt;&lt;span class="cm"&gt;/* Amateur Radio X.25 PLP   */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_DECnet   12  &lt;/span&gt;&lt;span class="cm"&gt;/* Reserved for DECnet project  */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_NETBEUI  13  &lt;/span&gt;&lt;span class="cm"&gt;/* Reserved for 802.2LLC project*/&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_SECURITY 14  &lt;/span&gt;&lt;span class="cm"&gt;/* Security callback pseudo AF */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_KEY      15      &lt;/span&gt;&lt;span class="cm"&gt;/* PF_KEY key management API */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_NETLINK  16&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_ROUTE    AF_NETLINK &lt;/span&gt;&lt;span class="cm"&gt;/* Alias to emulate 4.4BSD */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_PACKET   17  &lt;/span&gt;&lt;span class="cm"&gt;/* Packet family        */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_ASH      18  &lt;/span&gt;&lt;span class="cm"&gt;/* Ash              */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_ECONET   19  &lt;/span&gt;&lt;span class="cm"&gt;/* Acorn Econet         */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_ATMSVC   20  &lt;/span&gt;&lt;span class="cm"&gt;/* ATM SVCs         */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_RDS      21  &lt;/span&gt;&lt;span class="cm"&gt;/* RDS sockets          */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_SNA      22  &lt;/span&gt;&lt;span class="cm"&gt;/* Linux SNA Project (nutters!) */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_IRDA     23  &lt;/span&gt;&lt;span class="cm"&gt;/* IRDA sockets         */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_PPPOX    24  &lt;/span&gt;&lt;span class="cm"&gt;/* PPPoX sockets        */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_WANPIPE  25  &lt;/span&gt;&lt;span class="cm"&gt;/* Wanpipe API Sockets */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_LLC      26  &lt;/span&gt;&lt;span class="cm"&gt;/* Linux LLC            */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_IB       27  &lt;/span&gt;&lt;span class="cm"&gt;/* Native InfiniBand address    */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_CAN      29  &lt;/span&gt;&lt;span class="cm"&gt;/* Controller Area Network      */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_TIPC     30  &lt;/span&gt;&lt;span class="cm"&gt;/* TIPC sockets         */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_BLUETOOTH    31  &lt;/span&gt;&lt;span class="cm"&gt;/* Bluetooth sockets        */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_IUCV     32  &lt;/span&gt;&lt;span class="cm"&gt;/* IUCV sockets         */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_RXRPC    33  &lt;/span&gt;&lt;span class="cm"&gt;/* RxRPC sockets        */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_ISDN     34  &lt;/span&gt;&lt;span class="cm"&gt;/* mISDN sockets        */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_PHONET   35  &lt;/span&gt;&lt;span class="cm"&gt;/* Phonet sockets       */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_IEEE802154   36  &lt;/span&gt;&lt;span class="cm"&gt;/* IEEE802154 sockets       */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_CAIF     37  &lt;/span&gt;&lt;span class="cm"&gt;/* CAIF sockets         */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_ALG      38  &lt;/span&gt;&lt;span class="cm"&gt;/* Algorithm sockets        */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_NFC      39  &lt;/span&gt;&lt;span class="cm"&gt;/* NFC sockets          */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_VSOCK    40  &lt;/span&gt;&lt;span class="cm"&gt;/* vSockets         */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define AF_MAX      41  &lt;/span&gt;&lt;span class="cm"&gt;/* For now.. */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;1.4&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include    &amp;quot;unp.h&amp;quot;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;                 &lt;span class="n"&gt;sockfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;                &lt;span class="n"&gt;recvline&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAXLINE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt;  &lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;err_quit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;usage: a.out &amp;lt;IPaddress&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockfd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;err_sys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;socket error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;bzero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_port&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="cm"&gt;/* daytime server */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inet_pton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;err_quit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;inet_pton error for %s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SA&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;err_sys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;connect error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recvline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAXLINE&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;recvline&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="cm"&gt;/* null terminate */&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recvline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;EOF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;err_sys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fputs error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;err_sys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;read error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter: %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Output:&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Sun Jun  &lt;span class="m"&gt;8&lt;/span&gt; 14:36:06 2014
counter: 1
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;1.5&lt;/h3&gt;
&lt;p&gt;Server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include    &amp;quot;unp.h&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#include    &amp;lt;time.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;                 &lt;span class="n"&gt;listenfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;connfd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt;  &lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;                &lt;span class="n"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAXLINE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;time_t&lt;/span&gt;              &lt;span class="n"&gt;ticks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;listenfd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;bzero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_family&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htonl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INADDR_ANY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_port&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* daytime server */&lt;/span&gt;

    &lt;span class="n"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listenfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SA&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="n"&gt;Listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listenfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LISTENQ&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;connfd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listenfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SA&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;ticks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;snprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%.24s&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ticks&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="c1"&gt;//Write(connfd, buff, strlen(buff));&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buff&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connfd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Client:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include    &amp;quot;unp.h&amp;quot;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;                 &lt;span class="n"&gt;sockfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;                &lt;span class="n"&gt;recvline&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAXLINE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt;  &lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;err_quit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;usage: a.out &amp;lt;IPaddress&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockfd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;err_sys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;socket error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;bzero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_port&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="cm"&gt;/* daytime server */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inet_pton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;err_quit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;inet_pton error for %s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SA&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;servaddr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;err_sys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;connect error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recvline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAXLINE&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;recvline&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="cm"&gt;/* null terminate */&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recvline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;EOF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;err_sys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fputs error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;err_sys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;read error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter: %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;localhost test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./daytimetcpsrv &amp;amp;
./daytimetcpcli 127.0.0.1
#output:
Sun Jun  8 14:53:29 2014
counter: 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output on remote host test same as localhost&lt;/p&gt;</summary><category term="unpv13e"></category><category term="notes"></category></entry><entry><title>编译unpv13e源代码</title><link href="http://blog.junfeng.ca/bian-yi-unpv13eyuan-dai-ma.html" rel="alternate"></link><updated>2014-06-03T14:28:00+08:00</updated><author><name>junfeng</name></author><id>tag:blog.junfeng.ca,2014-06-03:bian-yi-unpv13eyuan-dai-ma.html</id><summary type="html">&lt;p&gt;在&lt;a href="http://www.unpbook.com/unpv13e.tar.gz"&gt;这里&lt;/a&gt;下载源代码，根据README进行编译．&lt;/p&gt;
&lt;p&gt;在make libfree下时需要修改inet_ntop.c, 将第60行的
&lt;code&gt;size_t size&lt;/code&gt; 改成 &lt;code&gt;socklen_t size&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;貌似Linux不支持4.4BSD style routing sockets, 所以不需要编译libroute&lt;/p&gt;
&lt;p&gt;测试intro/daytimetcpcli: &lt;code&gt;./daytimetcpcli 216.171.112.36&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而书上给的IP地址会一直block.&lt;/p&gt;
&lt;p&gt;Then start reading the famous classic book.&lt;/p&gt;</summary><category term="unpv13e"></category></entry><entry><title>history</title><link href="http://blog.junfeng.ca/history.html" rel="alternate"></link><updated>2014-06-01T14:13:00+08:00</updated><author><name>junfeng</name></author><id>tag:blog.junfeng.ca,2014-06-01:history.html</id><summary type="html">&lt;p&gt;“我不喜欢历史”&lt;/p&gt;
&lt;p&gt;“你只是讨厌你的过去而已”&lt;/p&gt;
&lt;p&gt;语言对人的伤害仅次于身体的伤害。&lt;/p&gt;
&lt;p&gt;过去过去了，但它一直活在现在里。&lt;/p&gt;
&lt;p&gt;过去的事情有时候连自己都记不清楚，于是现在的你粉饰着，装点着你的过去。
直到你自己相信那是一段美好的恍若你亲身经历。&lt;/p&gt;
&lt;p&gt;但真实的过去永远在那，等待着机会吞噬你，吞噬你亲近的人。&lt;/p&gt;
&lt;p&gt;过去永远支配着现在的你，而现在又将过去。&lt;/p&gt;</summary><category term="过去"></category></entry><entry><title>从remove google redirect 失效说起</title><link href="http://blog.junfeng.ca/cong-remove-google-redirect-shi-xiao-shuo-qi.html" rel="alternate"></link><updated>2014-05-11T00:37:00+08:00</updated><author><name>junfeng</name></author><id>tag:blog.junfeng.ca,2014-05-11:cong-remove-google-redirect-shi-xiao-shuo-qi.html</id><summary type="html">&lt;p&gt;前段时间发现remove google redirect突然不能用了，在chrome web store的页面也没了。难道被google和谐了？对于我这个重度google使用者来说可不是一件好事情，搜索的结果都要先被google重定向，增加了不必要的加载时间。&lt;/p&gt;
&lt;p&gt;只想寻找解决办法：&lt;a href="https://github.com/juffy/RecoverUrl/raw/master/recover%20url.0.0.1.crx"&gt;点击这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;于是想着能不能改改那个插件的代码，修复这个bug，找到那个插件的源代码，发现一下子1200多行代码，这么复杂。感觉移除一个重定向链接不需要这么麻烦吧，决定自己实现一个。&lt;/p&gt;
&lt;p&gt;用的时候发现google在你点击一个链接时，会被替换成google的重定向链接。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;http://en.wikipedia.org/wiki/Continuous_integration
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;会被替换成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;sqi=2&amp;amp;ved=0CDUQFjAA&amp;amp;url=%68%74%74%70%3a%2f%2f%65%6e%2e%77%69%6b%69%70%65%64%69%61%2e%6f%72%67%2f%77%69%6b%69%2f%43%6f%6e%74%69%6e%75%6f%75%73%5f%69%6e%74%65%67%72%61%74%69%6f%6e&amp;amp;ei=W0NuU-OSBImQrQe0lYBw&amp;amp;usg=AFQjCNHxUWTtSC_MArGdeBXVTWRAUUkL5Q&amp;amp;sig2=dTBasnGxLNpeCYshC_LnbA
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查询的url的值是原网址经过url encode转换的。本来想着用这
个值得到原网址的。但google还算厚道，把原网址存到了属性data-url中了。原网址是得到了，关键是怎么恢复原网址。&lt;/p&gt;
&lt;p&gt;通过反复测试发现，刚开始搜索出来的链接是没有被处理的，但当你点击链接的时候却变成了google重定向的链接。因为google的某段js代码监听了mousedown事件，当你点击链接的时候，在鼠标按下时，google把链接修改了。这就好办了，我们可以监听mouseup事件，把网址再改回来，这样当点击后，浏览器看到的就是原网址了。(你要知道点击一次鼠标会先后触发mousedown, mouseup, click事件) 。如此就去掉了搜索结果的重定向。&lt;/p&gt;
&lt;p&gt;于是做了个小插件，只有24行代码&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href="https://github.com/juffy/RecoverUrl/raw/master/recover%20url.0.0.1.crx"&gt;here&lt;/a&gt;
项目地址：&lt;a href="https://github.com/juffy/RecoverUrl"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Written with &lt;a href="https://stackedit.io/"&gt;StackEdit&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="extensions"></category><category term="js event"></category></entry></feed>