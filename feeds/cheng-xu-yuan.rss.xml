<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jf.h</title><link>http://blog.junfeng.ca/</link><description>lylx</description><atom:link href="http://blog.junfeng.ca/feeds/cheng-xu-yuan.rss.xml" rel="self"></atom:link><lastBuildDate>Sun, 28 Jun 2015 20:20:58 +0800</lastBuildDate><item><title>C++ link and library usage</title><link>http://blog.junfeng.ca/c-link-and-library-usage.html</link><description>&lt;p&gt;When use a programming language produtively,
We need use third parties libraries.&lt;/p&gt;
&lt;p&gt;If we install libraries and header files in
/usr/lib, /usr/local/lib and /usr/include/,
/usr/local/include, compilers will find them automatically.
But when libraries and headers are not in system paths, How
do you tell compilers to find them.&lt;/p&gt;
&lt;p&gt;The answer is using compiler flags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-I&lt;/code&gt; adds headers search paths&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-L&lt;/code&gt; adds lib search paths&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt; adds lib files, includes dynamic and static libs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-Wl,-rpath,shared_path&lt;/code&gt; adds shared_path to rpath&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These flags control compilers how to find libraries you use.
Just like Java's class path.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;note: when use dynamic link, you should set rpath(RUNTIME SEARCH PATH)&lt;/em&gt;
&lt;em&gt;proporly, otherwise when executes, your program would't find shared&lt;/em&gt;
&lt;em&gt;libraries not located in system link path.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But the above way is a low level approach. More convenient way
is using Makefile with pkg-config tool. pkg-config can read config
files and provides compiler flags about a library.&lt;/p&gt;
&lt;p&gt;The most simple way is using CMake, CMake provides many commands to
find the library you are working with, and it is so convenient that
CMake provides lots of varaibles you can add paths for CMake to search.&lt;/p&gt;
&lt;p&gt;Some useful commands include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;include_directories&lt;/code&gt;, adds header files search path.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find_library&lt;/code&gt;, find library files for linking.&lt;/li&gt;
&lt;li&gt;some varaibles about rpath:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_RPATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_RPATH_USE_LINK_PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMAKE_BUILD_WITH_INSTALL_RPATH&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;References:&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.rapidtables.com/code/linux/gcc.htm"&gt;http://www.rapidtables.com/code/linux/gcc.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://manned.org/pkg-config.1"&gt;http://manned.org/pkg-config.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Rpath"&gt;https://en.wikipedia.org/wiki/Rpath&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cmake.org/documentation/"&gt;http://www.cmake.org/documentation/&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">junfeng</dc:creator><pubDate>Sun, 28 Jun 2015 20:20:58 +0800</pubDate><guid>tag:blog.junfeng.ca,2015-06-28:c-link-and-library-usage.html</guid><category>C++</category><category>CMake</category></item><item><title>backslash in C++</title><link>http://blog.junfeng.ca/backslash-in-c.html</link><description>&lt;p&gt;Use backslash to format long long lines. Oops, I nerver use it in C++.&lt;/p&gt;
&lt;p&gt;How to use backslash?&lt;/p&gt;
&lt;p&gt;This is an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
            &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fffff&amp;quot;&lt;/span&gt; \
                     &lt;span class="s"&gt;&amp;quot;fffff&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// right&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fffff&amp;quot;&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;fffff&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// right&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\u4f60\u597d&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* std::string s3 = &amp;quot;\u4f60\u&amp;quot; \&lt;/span&gt;
&lt;span class="cm"&gt;                      &amp;quot;597d&amp;quot;; wrong&lt;/span&gt;
&lt;span class="cm"&gt;    std::string s3 = &amp;quot;\u4f60\u&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt;        &amp;quot;597d&amp;quot;; wrong&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;你好&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;s3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;s4&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Maybe from now I need write one variable in one line, and document every variable.&lt;/p&gt;
&lt;p&gt;Hope I can get &lt;em&gt;clean code&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">junfeng</dc:creator><pubDate>Sun, 21 Jun 2015 18:24:19 +0800</pubDate><guid>tag:blog.junfeng.ca,2015-06-21:backslash-in-c.html</guid><category>backslash</category><category>C++</category></item><item><title>OAuth 2.0 Bearer Token Usage</title><link>http://blog.junfeng.ca/oauth-20-bearer-token-usage.html</link><description>&lt;h3&gt;引入&lt;/h3&gt;
&lt;p&gt;在给Tornado编写豆瓣API的类时, 在查看文档时, 发现其access_token
并不像其它网站那样是传在query或者body中的. 而是放入headers中.
即: &lt;code&gt;headers["Authorization"] = Bearer &amp;lt;access_token&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;搜索OAuth2.0 Bearer, 在RFC 6750中找到了详细介绍&lt;/p&gt;
&lt;h3&gt;使用access_token方法&lt;/h3&gt;
&lt;p&gt;标准中给出了3种access_token的使用方法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用headers的Authorization字段(格式如上)&lt;/li&gt;
&lt;li&gt;form字段形式放入POST请求的body中&lt;/li&gt;
&lt;li&gt;query形式放入url中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;标准推荐使用第一种方法. 第三种并不推荐, 因为access_token有可能泄漏.&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;p&gt;http://self-issued.info/docs/draft-ietf-oauth-v2-bearer.html&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">junfeng</dc:creator><pubDate>Mon, 08 Jun 2015 16:17:44 +0800</pubDate><guid>tag:blog.junfeng.ca,2015-06-08:oauth-20-bearer-token-usage.html</guid><category>OAuth2.0</category><category>Bearer</category></item><item><title>Python struct and Endianness</title><link>http://blog.junfeng.ca/python-struct-and-endianness.html</link><description>&lt;p&gt;偶然间在stackoverflow上看到下面这个问题:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;Please&lt;/span&gt; &lt;span class="s-Atom"&gt;explain&lt;/span&gt; &lt;span class="s-Atom"&gt;me&lt;/span&gt; &lt;span class="s-Atom"&gt;what&lt;/span&gt; &lt;span class="s-Atom"&gt;does&lt;/span&gt; &lt;span class="s-Atom"&gt;this&lt;/span&gt; &lt;span class="s-Atom"&gt;piece&lt;/span&gt; &lt;span class="s-Atom"&gt;of&lt;/span&gt; &lt;span class="s-Atom"&gt;code&lt;/span&gt; &lt;span class="s-Atom"&gt;do&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="s-Atom"&gt;h&lt;/span&gt; &lt;span class="s-Atom"&gt;should&lt;/span&gt; &lt;span class="s-Atom"&gt;be&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="nv"&gt;Byte&lt;/span&gt; &lt;span class="s-Atom"&gt;result&lt;/span&gt; &lt;span class="s-Atom"&gt;from&lt;/span&gt; &lt;span class="s-Atom"&gt;sha256&lt;/span&gt; &lt;span class="s-Atom"&gt;calculation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nv"&gt;I&lt;/span&gt; &lt;span class="s-Atom"&gt;am&lt;/span&gt; &lt;span class="s-Atom"&gt;rewriting&lt;/span&gt; &lt;span class="s-Atom"&gt;parts&lt;/span&gt; &lt;span class="s-Atom"&gt;of&lt;/span&gt; &lt;span class="s-Atom"&gt;this&lt;/span&gt; &lt;span class="s-Atom"&gt;code&lt;/span&gt; &lt;span class="s-Atom"&gt;for&lt;/span&gt; &lt;span class="s-Atom"&gt;my&lt;/span&gt; &lt;span class="s-Atom"&gt;project&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;&lt;span class="s-Atom"&gt;++&lt;/span&gt; &lt;span class="s-Atom"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;I&lt;/span&gt;&lt;span class="s-Atom"&gt;&amp;#39;m not sure if this switches byte order per 4byte chunk or change byte order on whole 32byte number.&lt;/span&gt;

&lt;span class="s-Atom"&gt;def reverse_hash(h):&lt;/span&gt;
&lt;span class="s-Atom"&gt;    return struct.pack(&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;IIIIIIII&lt;/span&gt;&lt;span class="s-Atom"&gt;&amp;#39;, *struct.unpack(&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;IIIIIIII&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s-Atom"&gt;::-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="s-Atom"&gt;::-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;And&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;how&lt;/span&gt; &lt;span class="s-Atom"&gt;does&lt;/span&gt; &lt;span class="s-Atom"&gt;this&lt;/span&gt; &lt;span class="s-Atom"&gt;array&lt;/span&gt; &lt;span class="s-Atom"&gt;index&lt;/span&gt; &lt;span class="s-Atom"&gt;work&lt;/span&gt; &lt;span class="s-Atom"&gt;?&lt;/span&gt;

   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s-Atom"&gt;::-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Thanks&lt;/span&gt; &lt;span class="s-Atom"&gt;for&lt;/span&gt; &lt;span class="s-Atom"&gt;any&lt;/span&gt; &lt;span class="s-Atom"&gt;and&lt;/span&gt; &lt;span class="s-Atom"&gt;all&lt;/span&gt; &lt;span class="s-Atom"&gt;info&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;Python的splice到还好理解.但对于代码里struct的使用倒是很是疑惑.&lt;br /&gt;
遂搜索struct module的使用.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This module performs conversions between Python values and C structs
represented as Python strings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用法也就参考文档.&lt;/p&gt;
&lt;p&gt;当遇到字节序的时候,产生了疑惑.  &lt;/p&gt;
&lt;p&gt;不同的架构有不同的字节序.大致有三种,大端(Big-endian),小端(Little-endian),双端(Bi-endian).(貌似还有Middle-endian).&lt;br /&gt;
简单来说,&lt;br /&gt;
大端是高位字节在低地址处,低位字节在高地址处,&lt;br /&gt;
小端是低位字节在低地址处,高位字节在高地址处.&lt;br /&gt;
双端是字节序可以配置.&lt;/p&gt;
&lt;p&gt;理解:&lt;br /&gt;
1. 内存中的数据写进去就不再改变.只是解析的顺序不同才有大端,小端一说.&lt;br /&gt;
2.
字节序大端小端之说针对的是单个内存单元之内的字节顺序.单元与单元之间只是按地址线性增长.&lt;/p&gt;
&lt;p&gt;先看wiki上的一个例子:&lt;br /&gt;
字符串"XRAY"的存储分配.&lt;br /&gt;
XRAY 字符值表:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;X   0x58
  R   0x52
  A   0x41
  Y   0x59&lt;/p&gt;
&lt;hr /&gt;
&lt;dl&gt;
&lt;dd&gt;character int value&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;以一个字节为存储单元:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;...&lt;/code&gt;   &lt;code&gt;"Y"&lt;/code&gt;   &lt;code&gt;"A"&lt;/code&gt;   &lt;code&gt;"R"&lt;/code&gt;   &lt;code&gt;"X"&lt;/code&gt;   &lt;code&gt;...&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;dl&gt;
&lt;dd&gt;addresses from right to left&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;以两个字节为单位:&lt;br /&gt;
要表示"XRAY",内存实际分布:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;...&lt;/code&gt;   &lt;code&gt;"AY"&lt;/code&gt;   &lt;code&gt;"XR"&lt;/code&gt;   &lt;code&gt;...&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;dl&gt;
&lt;dd&gt;addresses from right to left&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;测试代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# coding: utf-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;struct&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;XRAY&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;little_s_uchar_hex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;BBBB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;big_s_uchar_hex:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;big_s_uchar_hex&lt;/span&gt;
&lt;span class="n"&gt;big_s_ushort_hex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;gt;HH&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;big_s_ushort_hex:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;big_s_ushort_hex&lt;/span&gt;
&lt;span class="c"&gt;#output:&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;little_s_uchar_hex: [&amp;#39;0x58&amp;#39;, &amp;#39;0x52&amp;#39;, &amp;#39;0x41&amp;#39;, &amp;#39;0x59&amp;#39;]&lt;/span&gt;
&lt;span class="sd"&gt;little_s_ushort_hex: [&amp;#39;0x5258&amp;#39;, &amp;#39;0x5941&amp;#39;]&lt;/span&gt;
&lt;span class="sd"&gt;big_s_uchar_hex: [&amp;#39;0x58&amp;#39;, &amp;#39;0x52&amp;#39;, &amp;#39;0x41&amp;#39;, &amp;#39;0x59&amp;#39;]&lt;/span&gt;
&lt;span class="sd"&gt;big_s_ushort_hex: [&amp;#39;0x5852&amp;#39;, &amp;#39;0x4159&amp;#39;]&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;观察little_s_ushort_hex的值.由于笔者使用的是x86的机子(小端字节序).&lt;br /&gt;
little_s_ushort_hex在内存中的存储序列是:&lt;br /&gt;
0x52 0x58 0x59 0x41&lt;br /&gt;
即为AYXR(地址从右向左增长)&lt;br /&gt;
和wiki中的表示相符.&lt;/p&gt;
&lt;p&gt;再来看一个例子&lt;br /&gt;
将一个8位的字符串unpack成8个unsigned char,4个unsigned short,2个unsigned
int,1个unsigned long long&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;span class="c"&gt;# coding: utf-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;struct&lt;/span&gt;

&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hjflyllx&amp;#39;&lt;/span&gt; &lt;span class="c"&gt;# my prefered string&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;string:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;string_hex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;string_hex:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_hex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;little_uchar_string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;BBBBBBBB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;big_uchar_string:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;big_uchar_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;big_uchar_string_hex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;big_uchar_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;big_uchar_string_hex:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;big_uchar_string_hex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;little_ushort_string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HHHH&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;big_ushort_string:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;big_ushort_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;big_ushort_string_hex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;big_ushort_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;big_ushort_string_hex:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;big_ushort_string_hex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;little_uint_string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;II&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;big_uint_string:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;big_uint_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;big_uint_string_hex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;big_uint_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;big_uint_string_hex:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;big_uint_string_hex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;little_ullong_string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Q&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;big_ullong_string:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;big_ullong_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;big_ullong_string_hex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;big_ullong_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;big_ullong_string_hex:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;big_ullong_string_hex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;#output:&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;string:hjflyllx&lt;/span&gt;
&lt;span class="sd"&gt;--------------------&lt;/span&gt;
&lt;span class="sd"&gt;string_hex:&lt;/span&gt;
&lt;span class="sd"&gt;[&amp;#39;0x68&amp;#39;, &amp;#39;0x6a&amp;#39;, &amp;#39;0x66&amp;#39;, &amp;#39;0x6c&amp;#39;, &amp;#39;0x79&amp;#39;, &amp;#39;0x6c&amp;#39;, &amp;#39;0x6c&amp;#39;, &amp;#39;0x78&amp;#39;]&lt;/span&gt;
&lt;span class="sd"&gt;--------------------uchar big and little endianness--------------------&lt;/span&gt;
&lt;span class="sd"&gt;little_uchar_string:&lt;/span&gt;
&lt;span class="sd"&gt;(104, 106, 102, 108, 121, 108, 108, 120)&lt;/span&gt;
&lt;span class="sd"&gt;little_uchar_string_hex:&lt;/span&gt;
&lt;span class="sd"&gt;[&amp;#39;0x68&amp;#39;, &amp;#39;0x6a&amp;#39;, &amp;#39;0x66&amp;#39;, &amp;#39;0x6c&amp;#39;, &amp;#39;0x79&amp;#39;, &amp;#39;0x6c&amp;#39;, &amp;#39;0x6c&amp;#39;, &amp;#39;0x78&amp;#39;]&lt;/span&gt;
&lt;span class="sd"&gt;big_uchar_string:&lt;/span&gt;
&lt;span class="sd"&gt;(104, 106, 102, 108, 121, 108, 108, 120)&lt;/span&gt;
&lt;span class="sd"&gt;big_uchar_string_hex:&lt;/span&gt;
&lt;span class="sd"&gt;[&amp;#39;0x68&amp;#39;, &amp;#39;0x6a&amp;#39;, &amp;#39;0x66&amp;#39;, &amp;#39;0x6c&amp;#39;, &amp;#39;0x79&amp;#39;, &amp;#39;0x6c&amp;#39;, &amp;#39;0x6c&amp;#39;, &amp;#39;0x78&amp;#39;]&lt;/span&gt;
&lt;span class="sd"&gt;--------------------ushort big and little endianness--------------------&lt;/span&gt;
&lt;span class="sd"&gt;little_ushort_string:&lt;/span&gt;
&lt;span class="sd"&gt;(27240, 27750, 27769, 30828)&lt;/span&gt;
&lt;span class="sd"&gt;little_ushort_string_hex:&lt;/span&gt;
&lt;span class="sd"&gt;[&amp;#39;0x6a68&amp;#39;, &amp;#39;0x6c66&amp;#39;, &amp;#39;0x6c79&amp;#39;, &amp;#39;0x786c&amp;#39;]&lt;/span&gt;
&lt;span class="sd"&gt;big_ushort_string:&lt;/span&gt;
&lt;span class="sd"&gt;(26730, 26220, 31084, 27768)&lt;/span&gt;
&lt;span class="sd"&gt;big_ushort_string_hex:&lt;/span&gt;
&lt;span class="sd"&gt;[&amp;#39;0x686a&amp;#39;, &amp;#39;0x666c&amp;#39;, &amp;#39;0x796c&amp;#39;, &amp;#39;0x6c78&amp;#39;]&lt;/span&gt;
&lt;span class="sd"&gt;--------------------uint big and little endianness--------------------&lt;/span&gt;
&lt;span class="sd"&gt;little_uint_string:&lt;/span&gt;
&lt;span class="sd"&gt;(1818651240, 2020371577)&lt;/span&gt;
&lt;span class="sd"&gt;little_uint_string_hex:&lt;/span&gt;
&lt;span class="sd"&gt;[&amp;#39;0x6c666a68&amp;#39;, &amp;#39;0x786c6c79&amp;#39;]&lt;/span&gt;
&lt;span class="sd"&gt;big_uint_string:&lt;/span&gt;
&lt;span class="sd"&gt;(1751803500, 2037148792)&lt;/span&gt;
&lt;span class="sd"&gt;big_uint_string_hex:&lt;/span&gt;
&lt;span class="sd"&gt;[&amp;#39;0x686a666c&amp;#39;, &amp;#39;0x796c6c78&amp;#39;]&lt;/span&gt;
&lt;span class="sd"&gt;--------------------ullong big and little endianness--------------------&lt;/span&gt;
&lt;span class="sd"&gt;little_ullong_string:&lt;/span&gt;
&lt;span class="sd"&gt;(8677429850801597032,)&lt;/span&gt;
&lt;span class="sd"&gt;little_ullong_string_hex:&lt;/span&gt;
&lt;span class="sd"&gt;[&amp;#39;0x786c6c796c666a68&amp;#39;]&lt;/span&gt;
&lt;span class="sd"&gt;big_ullong_string:&lt;/span&gt;
&lt;span class="sd"&gt;(7523938743555484792,)&lt;/span&gt;
&lt;span class="sd"&gt;big_ullong_string_hex:&lt;/span&gt;
&lt;span class="sd"&gt;[&amp;#39;0x686a666c796c6c78&amp;#39;]&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;下面是一些表格,假设地址开始于100&lt;/p&gt;
&lt;p&gt;address   character   hex value&lt;/p&gt;
&lt;hr /&gt;
&lt;dl&gt;
&lt;dt&gt;100       h           0x68&lt;/dt&gt;
&lt;dt&gt;  101       j           0x6a&lt;/dt&gt;
&lt;dt&gt;  102       f           0x66&lt;/dt&gt;
&lt;dt&gt;  103       l           0x6c&lt;/dt&gt;
&lt;dt&gt;  104       y           0x79&lt;/dt&gt;
&lt;dt&gt;  105       l           0x6c&lt;/dt&gt;
&lt;dt&gt;  106       l           0x6c&lt;/dt&gt;
&lt;dt&gt;  107       x           0x78&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;string&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;address   characters   hex value&lt;/p&gt;
&lt;hr /&gt;
&lt;dl&gt;
&lt;dt&gt;100       jh           0x6a68&lt;/dt&gt;
&lt;dt&gt;  102       lf           0x6c66&lt;/dt&gt;
&lt;dt&gt;  104       ly           0x6c79&lt;/dt&gt;
&lt;dt&gt;  106       xl           0x786c&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;little ushort&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;address   characters   hex value&lt;/p&gt;
&lt;hr /&gt;
&lt;dl&gt;
&lt;dt&gt;100       lfjh         0x6c666a68&lt;/dt&gt;
&lt;dt&gt;  104       xlly         0x786c6c79&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;little uint&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;address   characters   hex value&lt;/p&gt;
&lt;hr /&gt;
&lt;dl&gt;
&lt;dt&gt;100       xllylfjh     0x786c6c796c666a68&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;little ulonglong&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;uchar那一项可以看出当内存单元大小是一个字节时,大端,小端字节序是一样的.  &lt;/p&gt;
&lt;p&gt;而其它多于1个字节的内存单元,可以看到&lt;strong&gt;相对应的项的字节顺序正好颠倒.但单元与单元之间的顺势都是递增的.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在我们来看其中一个人的回答:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s-Atom"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s-Atom"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="s-Atom"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s-Atom"&gt;h&lt;/span&gt;
&lt;span class="s-Atom"&gt;&amp;#39;01234567891011121314151617181920&amp;#39;&lt;/span&gt;
&lt;span class="s-Atom"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s-Atom"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;&amp;#39;&amp;gt;IIIIIIII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="s-Atom"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;&amp;#39;&amp;gt;IIIIIIII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s-Atom"&gt;::-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="s-Atom"&gt;::-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s-Atom"&gt;&amp;#39;32107654019821114131615181710291&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;Equivalent&lt;/span&gt; &lt;span class="nn"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="s-Atom"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s-Atom"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;&amp;#39;&amp;lt;IIIIIIII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="s-Atom"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;&amp;#39;&amp;gt;IIIIIIII&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;h&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="s-Atom"&gt;&amp;#39;32107654019821114131615181710291&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;主要看其给出的相等实现:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; struct.pack(&amp;#39;&amp;lt;IIIIIIII&amp;#39;, *struct.unpack(&amp;#39;&amp;gt;IIIIIIII&amp;#39;, h))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为什么这个也能得出相同的结果?  &lt;/p&gt;
&lt;p&gt;采用不同的字节序进行unpack,pack一个字符串,就能得出单元内存内的字符串翻转.&lt;br /&gt;
你应该知道了为什么吧!&lt;/p&gt;
&lt;p&gt;同样假设开始内存地址是100,我们只分析一个内存单元(4个字节),&lt;/p&gt;
&lt;p&gt;见表:&lt;/p&gt;
&lt;p&gt;address   character&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;100       '0'
  101       '1'
  102       '2'
  103       '3'&lt;/p&gt;
&lt;p&gt;先是以大端字节序来unpack,读出的内容就是'0123'的内存表示的整数.  &lt;/p&gt;
&lt;p&gt;然后以小端来pack,小端是低位在前,高位在后,进行继续读,从103-100,读到的也就是'3210'了.&lt;br /&gt;
参考链接:&lt;br /&gt;
http://docs.python.org/2/library/struct.html&lt;br /&gt;
http://en.wikipedia.org/wiki/Endianness  &lt;/p&gt;
&lt;p&gt;http://stackoverflow.com/questions/20882693/what-does-this-piece-of-python-indexing-code-do&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Fri, 10 Jan 2014 21:02:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2014-01-10:python-struct-and-endianness.html</guid><category>endianness</category><category>struct</category></item><item><title>vps下lnmp配置</title><link>http://blog.junfeng.ca/vpse4b88blnmpe9858de7bdae.html</link><description>&lt;p&gt;换了hostigation的vps(128MB)之后，试了Debian，Ubuntu较新的版本都不行，总是提示说MySQL安装失败,最后不得已换上ubuntu
10.04勉强把mysql装上,但网站连接十次要有9次连不上。知道是肯定是那装的那些软件版本太低，bug太多。但还是没管它。&lt;/p&gt;
&lt;p&gt;最近得有空闲时间，决定把问题给解决。&lt;br /&gt;
备份整个数据库：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mysqldump -p -u --all-databases &amp;gt; all.sql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;备份归档wordpress目录,nginx配置文件目录&lt;br /&gt;
然后安装fedora 18&lt;/p&gt;
&lt;p&gt;安装mysqld&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;yum update #升级现有包
yum install mysql-server #mysqld
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装mysql-server&lt;br /&gt;
当启动mysqld时出现错误，无法启动。(折腾半天)&lt;br /&gt;
列出包里面的文件:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rpm -ql mysql-server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;日志文件在/var/log/mysqld.log&lt;br /&gt;
查看mysqld.log发现错误信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vim /var/log/mysqld.log
InnoDB: Error: pthread_create returned 11
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;11 (EAGAIN)表示系统缺乏资源创建另一个线程。&lt;/strong&gt;&lt;br /&gt;
好像是明白了，&lt;br /&gt;
128MB的小内存VPS运行InnoDB直接运行不了。&lt;/p&gt;
&lt;p&gt;用my-small.cnf替换/etc/my.cnf&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cp /usr/share/mysql/my-small.cnf /etc/my.cnf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同时修改my.cnf,在[mysqld]项下添加以下两行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;default-storage-engine=MYISAM
innodb=OFF
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用MYISAM替换InnoDB。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;systemctl start mysqld  #没有错误
systemctl enable mysqld #开机自启动
/usr/bin/mysql_secure_installation #安全安装
echo &amp;quot;flush privileges;&amp;quot; | mysql -p -u root #登陆到mysql,刷新权限,不然将出现数据库连接错误.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装nginx&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;yum install nginx
systemctl stop httpd
#and
yum erase httpd
systemctl start nginx
systemctl enable nginx
#恢复nginx配置文件,然后
systemctl reload nginx #配置信息生效
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装php(注意依赖)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;yum install php-pecl-apc php-cli php-pear php-pdo php-mysqlnd php-pgsql php-pecl-mongo php-sqlite php-pecl-memcache php-pecl-memcached php-gd php-mbstring php-mcrypt php-xml php-fpm

systemctl start php-fpm
systemctl enable php-fpm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;恢复备份的wordpress到/var/www/目录&lt;/p&gt;
&lt;p&gt;打开网站,一切正常。&lt;br /&gt;
迁移成功。&lt;br /&gt;
吐槽hostigation为什么没有archlinux的虚拟系统。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Fri, 10 Jan 2014 00:37:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2014-01-10:vpse4b88blnmpe9858de7bdae.html</guid><category>mysqld</category><category>vps(128MB)</category></item><item><title>setjmp and longjmp</title><link>http://blog.junfeng.ca/setjmp-and-longjmp.html</link><description>&lt;p&gt;&lt;img alt="" src="http://ww4.sinaimg.cn/large/894981ddtw1ea7v9y0qdsj20gx0stwj3.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;全局,静态,易失变量不受优化影响保存在存储器中,存放在存储器中的变量具有调用longjmp()时的值;进行优化后自动,寄存器变量保存寄存器中,CPU和浮点寄存器中的值恢复为调用setjmp()时的值.不进行优化,五种变量全部保存在存储器中.(来自APUE)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Sun, 03 Nov 2013 15:35:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-11-03:setjmp-and-longjmp.html</guid><category>nolocaljmp</category></item><item><title>file hole</title><link>http://blog.junfeng.ca/file-hole.html</link><description>&lt;p&gt;当lseek设置文件偏移量超过文件尾端,并写了某些数据后,就会产生文件空洞.&lt;/p&gt;
&lt;p&gt;文件长度st_size:&lt;/p&gt;
&lt;p&gt;文件中的空洞会影响文件的长度,read读含有空洞的文件时,会把空洞填0.read读空洞也会读到0值.&lt;/p&gt;
&lt;p&gt;文件占用磁盘大小:&lt;/p&gt;
&lt;p&gt;文件在磁盘中是以4k的逻辑块进行存储的.每个文件占用的磁盘大小都是4k的整数倍.&lt;/p&gt;
&lt;p&gt;write()写,实际内核是一次写4k数据到磁盘的.文件一般是块缓冲的.物理写大小为4k.&lt;/p&gt;
&lt;p&gt;空洞占用的物理空间最多不超过2个逻辑块(8k).&lt;/p&gt;
&lt;p&gt;若空洞将要使文件磁盘大小增长多于１个逻辑块大小时,将进行取余.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Sun, 03 Nov 2013 14:48:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-11-03:file-hole.html</guid><category>file hole</category></item><item><title>Teiba Cookie</title><link>http://blog.junfeng.ca/teiba-cookie.html</link><description>&lt;p&gt;首先访问&lt;a href="http://tieba.baidu.com/"&gt;http://tieba.baidu.com/&lt;/a&gt;,登陆要勾选记住我的登陆状态(即自动登录),这样Cookie才能长期有效.&lt;/p&gt;
&lt;p&gt;对于Chrome浏览器:&lt;/p&gt;
&lt;p&gt;右键审查元素,打开开发者工具,选择Network,刷新贴吧首页.然后上滑找到tieba.baidu.com那一项,点击headers,在Request
Headers中找到Cookie那一项,很长的一串字符串.复制到&lt;a href="http://signalltiebas.duapp.com/settings"&gt;http://signalltiebas.duapp.com/settings&lt;/a&gt;页面中的Cookie框中提交就可以了.&lt;/p&gt;
&lt;p&gt;其它浏览器类似.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Mon, 28 Oct 2013 14:00:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-10-28:teiba-cookie.html</guid><category>signalltiebas</category></item><item><title>JavaScript closure</title><link>http://blog.junfeng.ca/closure-of-programming-languages.html</link><description>&lt;blockquote&gt;
&lt;p&gt;a closure (also lexical closure or function closure) is a function or
reference to a function together with a referencing environment—a
table storing a reference to each of the non-local variables (also
called free variables or upvalues) of that function.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Closure_(computer_science)"&gt;http://en.wikipedia.org/wiki/Closure_(computer_science)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The initial values of the non-local variables depends on not where
    the closure define,but where the closure call.&lt;/li&gt;
&lt;li&gt;Referencing environment ,not copy.Meaning when you call a variable
    references to a closure twice,the environment maybe change.&lt;/li&gt;
&lt;li&gt;Every time you hold a returened closure using a varible
    will initialize it's referencing enviroment.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div&gt;

var name="Window";

&lt;/div&gt;

&lt;div&gt;

var Top={

&lt;/div&gt;

&lt;div&gt;

    name:"top",

&lt;/div&gt;

&lt;div&gt;

    Inner:{

&lt;/div&gt;

&lt;div&gt;

        name:"inner",

&lt;/div&gt;

&lt;div&gt;

        getName:function(){

&lt;/div&gt;

&lt;div&gt;

            var that=this;

&lt;/div&gt;

&lt;div&gt;

            var i=0;//note1

&lt;/div&gt;

&lt;div&gt;

            function increase(){

&lt;/div&gt;

&lt;div&gt;

                var rt="this binding:"+this.name+"\\n\\n"+"number
i:"+i;//this binding

&lt;/div&gt;

&lt;div&gt;

                i++;

&lt;/div&gt;

&lt;div&gt;

                return rt;

&lt;/div&gt;

&lt;div&gt;

            };

&lt;/div&gt;

&lt;div&gt;

            i++;//note1

&lt;/div&gt;

&lt;div&gt;

            return increase;

&lt;/div&gt;

&lt;div&gt;

        }

&lt;/div&gt;

&lt;div&gt;

    }

&lt;/div&gt;

&lt;div&gt;

};

&lt;/div&gt;

&lt;div&gt;

var closure1=Top.Inner.getName();

&lt;/div&gt;

&lt;div&gt;

alert("first call closure1"+"\\n"+closure1());//note1

&lt;/div&gt;

&lt;div&gt;

var closure2=Top.Inner.getName();

&lt;/div&gt;

&lt;div&gt;

alert("first call closure2"+"\\n"+closure2()); //note1,note3

&lt;/div&gt;

&lt;div&gt;

alert("againe call closure1"+"\\n"+closure1());//note2

&lt;/div&gt;

&lt;div&gt;

alert("againe call closure2"+"\\n"+closure2());//note2

&lt;/div&gt;

&lt;div&gt;

var closure21=closure2;

&lt;/div&gt;

&lt;div&gt;

alert("first call closure21"+"\\n"+closure3());//assign another varible
has referencing enviroment

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

References
----------

&lt;http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html&gt;

&lt;http://coolshell.cn/articles/6731.html&gt;

&lt;http://en.wikipedia.org/wiki/Closure_(computer_science)&gt;

&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Wed, 23 Oct 2013 16:35:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-10-23:closure-of-programming-languages.html</guid><category>closure</category><category>JavaScript</category></item><item><title>Ajax初级使用</title><link>http://blog.junfeng.ca/ajaxe5889de7baa7e4bdbfe794a8.html</link><description>&lt;p&gt;当一个页面有多个地方需要使用Ajax与服务器通信时，应该尽量把发送Ajax封装成一个函数，在这个函数里面处理各种不同的请求．这样能适当减少代码的重复.&lt;/p&gt;
&lt;p&gt;Ajax使用流程,
new XMLHttpRequest(),open(),send(),然后处理响应，根据响应内容判断，给予用户提示．大体就是这种流程．&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Tue, 15 Oct 2013 13:03:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-10-15:ajaxe5889de7baa7e4bdbfe794a8.html</guid><category>Ajax</category></item><item><title>the variable scope of list comprehensions</title><link>http://blog.junfeng.ca/the-variable-scope-of-list-comprehensions.html</link><description>&lt;p&gt;When using list comprehensions,the scope of temp variable doesn't
express as you expect.&lt;/p&gt;
&lt;p&gt;For example&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Python 2.7.5 (default, May 15 2013, 22:43:36) [MSC v.1500 32 bit
(Intel)] on win32&lt;br /&gt;
 Type "copyright", "credits" or "license()" for more information.&lt;br /&gt;
 &gt;&gt;&gt; L=[i for i in range(10)]&lt;br /&gt;
 &gt;&gt;&gt; print i&lt;br /&gt;
 9&lt;br /&gt;
 &gt;&gt;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and the output is 9,But maybe you shouldn't want this.&lt;/p&gt;
&lt;p&gt;If you have variable i in the toper scope.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&gt;&gt;&gt; i=2&lt;br /&gt;
 &gt;&gt;&gt; L=[i for i in range(10)]&lt;br /&gt;
 &gt;&gt;&gt; print i&lt;br /&gt;
 9&lt;br /&gt;
 &gt;&gt;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;the  value of i was overwritten。&lt;/p&gt;
&lt;p&gt;Happily,at Python 3 . the temp i in list comprehensions is local
variable.When the list comprehensions finished,the variables
were disappear.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Python 3.3.2 (v3.3.2:d047928ae3f6, May 16 2013, 00:03:43) [MSC v.1600
32 bit (Intel)] on win32&lt;br /&gt;
 Type "copyright", "credits" or "license()" for more information.&lt;br /&gt;
 &gt;&gt;&gt; L=[i for i in range(10)]&lt;br /&gt;
 &gt;&gt;&gt; print (i)&lt;br /&gt;
 Traceback (most recent call last):&lt;br /&gt;
 File "\&amp;lt;pyshell#1&gt;", line 1, in \&amp;lt;module&gt;&lt;br /&gt;
 print (i)&lt;br /&gt;
 NameError: name 'i' is not defined&lt;br /&gt;
 &gt;&gt;&gt; i=2&lt;br /&gt;
 &gt;&gt;&gt; L=[i for i in range(10)]&lt;br /&gt;
 &gt;&gt;&gt; print (i)&lt;br /&gt;
 2&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Mon, 14 Oct 2013 23:34:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-10-14:the-variable-scope-of-list-comprehensions.html</guid><category>Python</category><category>variable scope</category></item><item><title>JavaScript实践初步</title><link>http://blog.junfeng.ca/javascripte5ae9ee8b7b5e5889de6ada5.html</link><description>&lt;p&gt;\&amp;lt;\&amp;lt;JavaScript高级程序设计&gt;&gt;也看了大半本了,但却发现不会写JS程序,对界面设计什么的总是有一种畏惧的心理,最近这几天迷上了Chrome_Extensions开发了,想做一个插件来着．顺便练习了下JS编程,补充一下苍白的实践经验．&lt;/p&gt;
&lt;p&gt;虽然一个晚上,options.html页面都没做完,但还是学到了些知识．本来这些关于代码的没有必要写出来的，但今天晚上和JS作战,领悟了些许编程思想,觉得还是值得分享的.&lt;/p&gt;
&lt;p&gt;关于模块化编程有了些许理解,它不在是教科书中的古板,毫无印象的概念.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个函数,一个类,一个文件都可以说是模块,晚上某一特定功能.&lt;/li&gt;
&lt;li&gt;模块与模块之间界限要清楚,一个模块不能做另一个模块的事情.不然的话,有的受的,逻辑混乱,思维不顺,无休止的调试.&lt;/li&gt;
&lt;li&gt;关于JavaScript编程,页面显示代码尽量只根据页面的结构来动态显示页面,数据保存代码做它自己的事．符合上一条规则.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一个tab空格健无意间在parent的childNodes插入了一个Text
Node.造成至少有半个小时的调试.&lt;/p&gt;
&lt;p&gt;突然发现学DOM的一个好工具:&lt;/p&gt;
&lt;p&gt;Chromium自带的开发者工具看某个element的属性比www.w3schools.com的JavaScript在线教程舒服多了.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Wed, 18 Sep 2013 00:19:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-09-18:javascripte5ae9ee8b7b5e5889de6ada5.html</guid><category>JavaScript</category></item><item><title>2&gt;&amp;1</title><link>http://blog.junfeng.ca/21.html</link><description>&lt;p&gt;&lt;span
style="font-size: 1rem; line-height: 1.714285714;"&gt;在shell中,digit1 &gt;&amp;amp;
digit2表示将描述符digit1重定向到描述符digit2的同一文件.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;那么:&lt;/p&gt;
&lt;p&gt;./a.out &gt; out 2&gt;&amp;amp;1&lt;/p&gt;
&lt;p&gt;将标准输出和标准出错输出重定向到out文件&lt;/p&gt;
&lt;p&gt;./a.out  2&gt;&amp;amp;1 &gt; out&lt;br /&gt;
将标准出错输出重定向到标准输出，标准输出重定向到out文件。&lt;/p&gt;
&lt;div&gt;

&lt;/div&gt;

&lt;p&gt;两者功能并不相同。&lt;/p&gt;
&lt;p&gt;为什么顺序不一样产生的效果就不一样呢？&lt;/p&gt;
&lt;p&gt;实质上shell解释器是在内部调用dup2()类似的函数来实现重定向的．&lt;/p&gt;
&lt;p&gt;因为shell从左向右解释命令.&lt;/p&gt;
&lt;p&gt;对于 ./a.out &gt; out 2&gt;&amp;amp;1&lt;/p&gt;
&lt;p&gt;先调用 dup2(out,STDOUT_FILENO);//out,STDOUT_FILENO指向同一文件表项&lt;/p&gt;
&lt;p&gt;然后再是
dup2(STDOUT_FILENO,STDERR_FILENO);//STDERR_FILENO,STDOUT_FILENO指向同一文件表项&lt;/p&gt;
&lt;p&gt;而./a.out  2&gt;&amp;amp;1 &gt; out&lt;/p&gt;
&lt;p&gt;先是 dup2(STDOUT_FILENO,STDERR_FILENO);//标准出错指向原来的标准输出&lt;/p&gt;
&lt;p&gt;再是 dup2(out,STDOUT_FILENO);//标准输出重定向到out文件.&lt;/p&gt;
&lt;p&gt;通俗的说,上面的过程类似于有a,b,c三个变量.&lt;/p&gt;
&lt;p&gt;a=c,b=a;//a==b==c 和 b=a,a=c;//b!=c==a当然不一样了.&lt;/p&gt;
&lt;p&gt;实践:&lt;/p&gt;
&lt;p&gt;./a.out \&amp;lt; in 将标准输入重定向到in文件，即程序从in文件中读取数据.&lt;/p&gt;
&lt;p&gt;在使用mysql命令行程序时,可以先把SQL语句写入文件中,然后利用重定向输入,避免了不方便的输入.(Windows下cmd也支持)&lt;/p&gt;
&lt;p&gt;当在无X环境下查看程序输出时,若输出数据较多，一屏无法显示,此时可以将标准输出重定向到文件中,然后仔细查看.&lt;/p&gt;
&lt;p&gt;附测试程序:&lt;/p&gt;
&lt;p&gt;#include\&amp;lt;unistd.h&gt;&lt;br /&gt;
#include\&amp;lt;stdio.h&gt;&lt;br /&gt;
#include\&amp;lt;string.h&gt;&lt;br /&gt;
#define BUFFSIZE 4096&lt;br /&gt;
int main()&lt;br /&gt;
{&lt;br /&gt;
int n;&lt;br /&gt;
char buf[BUFFSIZE];&lt;br /&gt;
const char out[]="STDOUT:";&lt;br /&gt;
const char err[]="STDERR:";&lt;br /&gt;
n=read(STDIN_FILENO,buf,BUFFSIZE);//read from stdin&lt;br /&gt;
if (n&gt;0)&lt;br /&gt;
{&lt;br /&gt;
write(STDOUT_FILENO,out,strlen(out));&lt;br /&gt;
write(STDOUT_FILENO,buf,n);//write to stdout&lt;br /&gt;
write(STDERR_FILENO,err,strlen(err));&lt;br /&gt;
write(STDERR_FILENO,buf,n);//write to stderr&lt;br /&gt;
}&lt;br /&gt;
return 0;&lt;br /&gt;
}&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Fri, 13 Sep 2013 10:43:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-09-13:21.html</guid><category>2&amp;gt;&amp;amp;1</category></item><item><title>file descriptor</title><link>http://blog.junfeng.ca/file-descriptor.html</link><description>&lt;p&gt;和文件描述符有关的函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;open&lt;/li&gt;
&lt;li&gt;close&lt;/li&gt;
&lt;li&gt;dup&lt;/li&gt;
&lt;li&gt;dup2&lt;/li&gt;
&lt;li&gt;fcntl&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文件描述符为int整型变量，范围0-OPEN_MAX;&lt;/p&gt;
&lt;p&gt;在linux下OPEN_MAX未在limits.h下定义，使用sysconf(_SC_OPEN_MAX)获得其值．&lt;/p&gt;
&lt;p&gt;open打开文件返回文件描述符没什么好说的．&lt;/p&gt;
&lt;p&gt;close()关闭文件描述符，注意当有多个文件描述符指向同一文件表项时，必须close所有与之关联的描述符才能真正关闭文件．&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When all file descriptors associated with an open file description
have been closed, the open file  description shall be freed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此时无法再对文件进行更改．&lt;/p&gt;
&lt;p&gt;dup(),dup2()复制现存的文件描述符，在内核数据中一个新的文件描述符被创建．当总数达到OPEN_MAX时，进程无法再打开文件．&lt;/p&gt;
&lt;p&gt;当cmd=F_DUPFD时 fcntl和dup,dup2功能类似．&lt;/p&gt;
&lt;p&gt;附测试程序：&lt;/p&gt;
&lt;p&gt;#include\&amp;lt;unistd.h&gt;&lt;br /&gt;
#include\&amp;lt;stdio.h&gt;&lt;br /&gt;
#include\&amp;lt;limits.h&gt;&lt;br /&gt;
#include\&amp;lt;fcntl.h&gt;&lt;br /&gt;
#include\&amp;lt;errno.h&gt;&lt;br /&gt;
int main()&lt;br /&gt;
{&lt;br /&gt;
int i,f,open_max;&lt;br /&gt;
open_max=sysconf(_SC_OPEN_MAX);&lt;br /&gt;
for (i=3;i\&amp;lt;open_max;++i)&lt;br /&gt;
dup(STDOUT_FILENO);&lt;br /&gt;
// close(open_max-1);&lt;br /&gt;
f=open("test",O_WRONLY|O_CREAT,S_IRUSR|S_IWUSR);&lt;br /&gt;
if (errno==EMFILE)&lt;br /&gt;
printf("ERROR\n");&lt;br /&gt;
else&lt;br /&gt;
printf("%d\n",f);&lt;br /&gt;
return 0;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Sat, 07 Sep 2013 11:39:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-09-07:file-descriptor.html</guid><category>文件描述符</category></item><item><title>Jugs</title><link>http://blog.junfeng.ca/jugs.html</link><description>&lt;style type="text/css"&gt;&lt;!--&lt;br /&gt;
pre { font-family: monospace; color: #000000; background-color: #ffffff; } body { font-family: monospace; color: #000000; background-color: #ffffff; } .Type { color: #2e8b57; font-weight: bold; } .Statement { color: #804040; font-weight: bold; } .Constant { color: #ff00ff; } .PreProc { color: #a020f0; } --&gt;&lt;br&gt;&lt;/br&gt;
--&gt;&lt;/style&gt;

&lt;p&gt;ZOJ Problem Set - 1005 Jugs  &lt;/p&gt;
&lt;p&gt;题目：&lt;a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1005"&gt;来源&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Ca&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Cb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;work&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cb&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fill B&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ca&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fill A&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pour A B&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fill A&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Ca&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;Cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;empty B&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pour A B&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="n"&gt;Cb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Cb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pour A B&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pour A B&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;success&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Ca&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Cb&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;回溯，深度优先搜索，直接死循环了。  &lt;/p&gt;
&lt;p&gt;然后搜到了互质数的一个性质。貌似广度优先搜索也可以，没试，层次比较深的话，估计会超出内存限制。  &lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://www.cnblogs.com/phinecos/archive/2008/09/21/1295472.html"&gt;链接&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Thu, 30 May 2013 00:05:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-05-30:jugs.html</guid><category>互质数</category></item><item><title>Anagrams by Stack</title><link>http://blog.junfeng.ca/anagrams-by-stack.html</link><description>&lt;style type="text/css"&gt;&lt;!--&lt;br /&gt;
pre { font-family: monospace; color: #000000; background-color: #ffffff; } body { font-family: monospace; color: #000000; background-color: #ffffff; } .Special { color: #6a5acd; } .Comment { color: #0000ff; } .Type { color: #2e8b57; font-weight: bold; } .Statement { color: #804040; font-weight: bold; } .Constant { color: #ff00ff; } .PreProc { color: #a020f0; } --&gt;&lt;br&gt;&lt;/br&gt;
--&gt;&lt;/style&gt;

&lt;p&gt;ZOJ Problem Set - 1004 Anagrams by Stack  &lt;/p&gt;
&lt;p&gt;题目：&lt;a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1004"&gt;来源&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&amp;lt;cstring&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#define N 100&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="c1"&gt;//原word&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="c1"&gt;//目标word&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;pop_push&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="c1"&gt;//栈操作序列&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;stackf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="c1"&gt;//保存栈中栈中当前情况&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="c1"&gt;//保存生成word&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//递归出所有的进栈出栈操作&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//边界条件&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//s指向当前要进栈的字母，f指向栈顶，o指向out中当前可放位置&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pop_push&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//不合法的进栈，跳出&lt;/span&gt;
                &lt;span class="n"&gt;stackf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//不合法的出栈，跳出&lt;/span&gt;
                &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;stackf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//输出&lt;/span&gt;
                &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;pop_push&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;pop_push&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//首先进栈&lt;/span&gt;
    &lt;span class="n"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//递归到下一层&lt;/span&gt;
    &lt;span class="n"&gt;pop_push&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//退回，改成出栈&lt;/span&gt;
    &lt;span class="n"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//下一层&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;[&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;]&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;递归出所有栈操作，排除不合法的。找到满足条件的操作序列。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Wed, 29 May 2013 23:40:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-05-29:anagrams-by-stack.html</guid><category>stack</category></item><item><title>Crashing Balloon</title><link>http://blog.junfeng.ca/crashing-balloon.html</link><description>&lt;style type="text/css"&gt;&lt;!--&lt;br /&gt;
pre { font-family: monospace; color: #000000; background-color: #ffffff; } body { font-family: monospace; color: #000000; background-color: #ffffff; } .Comment { color: #0000ff; } .Type { color: #2e8b57; font-weight: bold; } .Statement { color: #804040; font-weight: bold; } .Constant { color: #ff00ff; } .PreProc { color: #a020f0; } --&gt;&lt;br&gt;&lt;/br&gt;
--&gt;&lt;/style&gt;

&lt;p&gt;ZOJ Problem Set - 1003 Crashing Balloon&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&amp;lt;cstring&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="c1"&gt;//记录1~100的数的使用与否。&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;af&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="c1"&gt;//记录数a的因式足迹以便回溯&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="c1"&gt;//记录数b的...&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;CheckMax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//类似于求解b的因式&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;bf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;bf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*=&lt;/span&gt;&lt;span class="n"&gt;bf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Checkab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//回溯法求出b的所有因式。&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;af&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//初始状态&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;af&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;af&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//第k个因子&lt;/span&gt;
                    &lt;span class="n"&gt;af&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//判断第k+1个，从i+1开始&lt;/span&gt;
                    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//找到b的一个因式&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CheckMax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;af&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//回溯到第k-1个&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//标记b能被分解&lt;/span&gt;
            &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;*=&lt;/span&gt;&lt;span class="n"&gt;af&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="c1"&gt;//b回溯&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//第k个因子没找到，回溯&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;af&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//解除占用&lt;/span&gt;
            &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;*=&lt;/span&gt;&lt;span class="n"&gt;af&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="c1"&gt;//b回溯到上一状态&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Checkab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;两个函数似乎可以合成一个。算了，AC了就行。算是用了一下回溯思想。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Fri, 24 May 2013 17:15:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-05-24:crashing-balloon.html</guid><category>ZOJ1003</category></item><item><title>Fire Net</title><link>http://blog.junfeng.ca/fire-net.html</link><description>&lt;p&gt;ZOJ Problem Set - 1002&lt;/p&gt;
&lt;style type="text/css"&gt;&lt;!--&lt;br /&gt;
pre { font-family: monospace; color: #000000; background-color: #ffffff; } body { font-family: monospace; color: #000000; background-color: #ffffff; } .PreProc { color: #a020f0; } .Special { color: #6a5acd; } .Constant { color: #ff00ff; } .Identifier { color: #008080; } .Statement { color: #804040; font-weight: bold; } --&gt;&lt;br&gt;&lt;/br&gt;
--&gt;&lt;/style&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;def Input(L,n):
        if type(L)==list:
                for i in range(0,n):
                        L.append([t for t in sys.stdin.readline().rstrip(&amp;#39;\n&amp;#39;)])
def place_bh(L,row,col,n):
        if L[row][col]==&amp;#39;X&amp;#39;:
                return False
        j=n-1
        while(j&amp;gt;=0):
                if j==col:
                        j-=1
                        continue
                if L[row][j]==&amp;#39;X&amp;#39;:
                        break
                if L[row][j]==&amp;#39;O&amp;#39;:
                        return False
                j-=1

        k=n-1
        while(k&amp;gt;=0):
                if k==row:
                        k-=1
                        continue
                if L[k][col]==&amp;#39;X&amp;#39;:
                        break
                if L[k][col]==&amp;#39;O&amp;#39;:
                        return False
                k-=1

        return True

def FindMax(L,k,n):
        curnum=0
        j=k
        while j&amp;lt;k+n*n:
                if j&amp;gt;=n*n:
                        z=j-n*n
                else:
                        z=j

                row=z/n
                col=z%n
                if place_bh(L,row,col,n):
                        L[row][col]=&amp;#39;O&amp;#39;
                        curnum+=1

                j+=1

        return curnum

def main():
        while True:
                n=int(sys.stdin.readline().rstrip(&amp;#39;\n&amp;#39;))
                if n==0:
                        break

                L=[]
                maxn=0
                Input(L,n)
                for k in range(0,n*n):
                        t=copy.deepcopy(L)
                        curn=FindMax(t,k,n)
                        if maxn&amp;lt;curn:
                                maxn=curn

                print maxn

if __name__==&amp;#39;__main__&amp;#39;:
        import copy
        import sys
        main()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;突然发现我没有用回溯法哎。&lt;/p&gt;
&lt;p&gt;Python做算法可以偷懒。呵呵&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="http://www.cnblogs.com/phinecos/archive/2008/09/18/1293017.html"&gt;链接&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Mon, 20 May 2013 20:24:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-05-20:fire-net.html</guid><category>ZOJ1002</category></item><item><title>8皇后问题</title><link>http://blog.junfeng.ca/8e79a87e5908ee997aee9a298.html</link><description>&lt;p&gt;传说中的问题。&lt;/p&gt;
&lt;p&gt;传说中的算法：回溯法&lt;/p&gt;
&lt;p&gt;Python实现：&lt;/p&gt;
&lt;div&gt;

def place\_queen(l):

&lt;/div&gt;

&lt;div&gt;

    if type(l)==list:

&lt;/div&gt;

&lt;div&gt;

        tq=l[-1]

&lt;/div&gt;

&lt;div&gt;

        k=len(l)

&lt;/div&gt;

&lt;div&gt;

        for i,iq in enumerate(l[0:-1],start=1):

&lt;/div&gt;

&lt;div&gt;

            if iq==tq or abs(iq-tq)==abs(i-k):

&lt;/div&gt;

&lt;div&gt;

                return False

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

        return True

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

def output\_queens(number,l,n):

&lt;/div&gt;

&lt;div&gt;

    print "Solution:%d" % number

&lt;/div&gt;

&lt;div&gt;

    for i in range(1,n+1):

&lt;/div&gt;

&lt;div&gt;

        for j in range(1,n+1):

&lt;/div&gt;

&lt;div&gt;

            if j==l[i-1]:

&lt;/div&gt;

&lt;div&gt;

                print "1   ",

&lt;/div&gt;

&lt;div&gt;

            else:

&lt;/div&gt;

&lt;div&gt;

                print "0   ",

&lt;/div&gt;

&lt;div&gt;

        print ''

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

def n\_queens(l,n):

&lt;/div&gt;

&lt;div&gt;

    nCount=0

&lt;/div&gt;

&lt;div&gt;

    l.append(0)

&lt;/div&gt;

&lt;div&gt;

    while(len(l)):

&lt;/div&gt;

&lt;div&gt;

        l[-1]=l[-1]+1

&lt;/div&gt;

&lt;div&gt;

        while(l[-1]\&lt;=n and not place\_queen(l)):

&lt;/div&gt;

&lt;div&gt;

            l[-1]+=1

&lt;/div&gt;

&lt;div&gt;

        if l[-1]\&lt;=n:

&lt;/div&gt;

&lt;div&gt;

            if len(l)==n:

&lt;/div&gt;

&lt;div&gt;

                nCount+=1

&lt;/div&gt;

&lt;div&gt;

                output\_queens(nCount,l,n)

&lt;/div&gt;

&lt;div&gt;

            else:

&lt;/div&gt;

&lt;div&gt;

                 l.append(0)

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

        else:

&lt;/div&gt;

&lt;div&gt;

            l.pop()

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

    return nCount

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

def main():

&lt;/div&gt;

&lt;div&gt;

    n=12

&lt;/div&gt;

&lt;div&gt;

    l=[]

&lt;/div&gt;

&lt;div&gt;

    nCount=n\_queens(l,n)

&lt;/div&gt;

&lt;div&gt;

    print "There are %d solutions!" % nCount

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

if \_\_name\_\_=='\_\_main\_\_':

&lt;/div&gt;

&lt;div&gt;

    import time

&lt;/div&gt;

&lt;div&gt;

    start=time.clock()

&lt;/div&gt;

&lt;div&gt;

    main()

&lt;/div&gt;

&lt;div&gt;

    end=time.clock()

&lt;/div&gt;

&lt;div&gt;

    print "Run time: %f seconds " % (end-start)

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;p&gt;话说第一次感觉Python有点慢了。&lt;/p&gt;
&lt;p&gt;当n=8时命令行下需要0.852626s，IDLE运行则需要16.468123s。而当n=12命令行下时需要266.441883s，就不在IDLE下运行了。&lt;/p&gt;
&lt;p&gt;而C代码呢。n=8时，0.188s；n=12时，10.674s。&lt;/p&gt;
&lt;p&gt;C真的快的如此彪悍。&lt;/p&gt;
&lt;p&gt;附C代码：  &lt;/p&gt;
&lt;p&gt;出处：&lt;a href="http://blog.csdn.net/livelylittlefish/article/details/2141142"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;

\#include \&lt;stdio.h\&gt;

&lt;/div&gt;

&lt;div&gt;

\#include \&lt;stdlib.h\&gt;

&lt;/div&gt;

&lt;div&gt;

\#include \&lt;math.h\&gt;

&lt;/div&gt;

&lt;div&gt;

\#include \&lt;conio.h\&gt;

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

\#define MAXNUMBER 20

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

//判断当前得到的解向量是否满足问题的解

&lt;/div&gt;

&lt;div&gt;

bool place\_queen(int x[],int k)

&lt;/div&gt;

&lt;div&gt;

{

&lt;/div&gt;

&lt;div&gt;

    int i;

&lt;/div&gt;

&lt;div&gt;

    for(i=1;i\&lt;k;i++)

&lt;/div&gt;

&lt;div&gt;

    {

&lt;/div&gt;

&lt;div&gt;

        if((x[i]==x[k]) || (abs(x[i]-x[k])==abs(i-k)))

&lt;/div&gt;

&lt;div&gt;

            return false;

&lt;/div&gt;

&lt;div&gt;

    }

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

    return true;

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

//将结果简单信息打印到屏幕

&lt;/div&gt;

&lt;div&gt;

void output\_queens(int x[],int n)

&lt;/div&gt;

&lt;div&gt;

{

&lt;/div&gt;

&lt;div&gt;

    for(int i=1;i\&lt;=n;i++)

&lt;/div&gt;

&lt;div&gt;

        printf("%3d",x[i]);

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

    printf("\\n");

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

//将结果详细信息写入文件

&lt;/div&gt;

&lt;div&gt;

void output\_queens(FILE \*fp,int number,int x[],int n)

&lt;/div&gt;

&lt;div&gt;

{

&lt;/div&gt;

&lt;div&gt;

    fprintf(fp,"solution %d: ",number);

&lt;/div&gt;

&lt;div&gt;

    for(int i=1;i\&lt;=n;i++)

&lt;/div&gt;

&lt;div&gt;

    {

&lt;/div&gt;

&lt;div&gt;

        for(int j=1;j\&lt;=n;j++)

&lt;/div&gt;

&lt;div&gt;

        {

&lt;/div&gt;

&lt;div&gt;

            if(j==x[i])

&lt;/div&gt;

&lt;div&gt;

                fprintf(fp,"1  ");

&lt;/div&gt;

&lt;div&gt;

            else

&lt;/div&gt;

&lt;div&gt;

                fprintf(fp,"0  ");

&lt;/div&gt;

&lt;div&gt;

        }

&lt;/div&gt;

&lt;div&gt;

        fprintf(fp,"\\n");

&lt;/div&gt;

&lt;div&gt;

    }

&lt;/div&gt;

&lt;div&gt;

    fprintf(fp,"\\n");

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

/\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*

&lt;/div&gt;

&lt;div&gt;

 \*  n后问题求解

&lt;/div&gt;

&lt;div&gt;

 \*  input  : n, the number of queens

&lt;/div&gt;

&lt;div&gt;

 \*  output : the vector of solution, X

&lt;/div&gt;

&lt;div&gt;

 \*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*/

&lt;/div&gt;

&lt;div&gt;

int n\_queens(FILE \*fp,int n,int x[])

&lt;/div&gt;

&lt;div&gt;

{

&lt;/div&gt;

&lt;div&gt;

    int nCount=0;    //解个数

&lt;/div&gt;

&lt;div&gt;

    int k=1;        //先处理第1个皇后

&lt;/div&gt;

&lt;div&gt;

    x[1]=0;

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

    while(k\&gt;0)

&lt;/div&gt;

&lt;div&gt;

    {

&lt;/div&gt;

&lt;div&gt;

        x[k]=x[k]+1;//在当前列加1的位置开始搜索

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

        while(x[k]\&lt;=n &amp;&amp; !place\_queen(x,k))  
 //当前列位置是否满足条件

&lt;/div&gt;

&lt;div&gt;

            x[k]=x[k]+1;    //不满足,继续搜索下一列位置

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

        if(x[k]\&lt;=n)    //若存在满足条件的列

&lt;/div&gt;

&lt;div&gt;

        {

&lt;/div&gt;

&lt;div&gt;

            if(k==n)//是最后一个皇后，则得到一个最终解

&lt;/div&gt;

&lt;div&gt;

            {

&lt;/div&gt;

&lt;div&gt;

                //break;    //此处若break,则只能得到一个解

&lt;/div&gt;

&lt;div&gt;

                nCount++;

&lt;/div&gt;

&lt;div&gt;

                output\_queens(x,n);    //输出

&lt;/div&gt;

&lt;div&gt;

                output\_queens(fp,nCount,x,n);

&lt;/div&gt;

&lt;div&gt;

            }

&lt;/div&gt;

&lt;div&gt;

            else    //否则，处理下一个皇后,即第 k+1 个皇后

&lt;/div&gt;

&lt;div&gt;

            {

&lt;/div&gt;

&lt;div&gt;

                k++;

&lt;/div&gt;

&lt;div&gt;

                x[k]=0;

&lt;/div&gt;

&lt;div&gt;

            }

&lt;/div&gt;

&lt;div&gt;

        }

&lt;/div&gt;

&lt;div&gt;

        else        //若不存在满足条件的列,则回溯

&lt;/div&gt;

&lt;div&gt;

        {

&lt;/div&gt;

&lt;div&gt;

            x[k]=0;    //第k个皇后复位为0

&lt;/div&gt;

&lt;div&gt;

            k--;    //回溯到前一个皇后

&lt;/div&gt;

&lt;div&gt;

        }

&lt;/div&gt;

&lt;div&gt;

    }

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

    return nCount;

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

int main()

&lt;/div&gt;

&lt;div&gt;

{

&lt;/div&gt;

&lt;div&gt;

    int n=8,x[MAXNUMBER]={0};

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

    FILE \*fp=fopen("8皇后问题的解.txt","w");

&lt;/div&gt;

&lt;div&gt;

    if(fp==NULL)

&lt;/div&gt;

&lt;div&gt;

    {

&lt;/div&gt;

&lt;div&gt;

        printf("can not wirte file!");

&lt;/div&gt;

&lt;div&gt;

        exit(0);

&lt;/div&gt;

&lt;div&gt;

    }

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

    printf("the queens are placed on the coloums : ");

&lt;/div&gt;

&lt;div&gt;

    //求解并写入文件

&lt;/div&gt;

&lt;div&gt;

    int nCount=n\_queens(fp,n,x);

&lt;/div&gt;

&lt;div&gt;

    printf("there are %d solutions! ",nCount);

&lt;/div&gt;

&lt;div&gt;

    fclose(fp);

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

    return 0;

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Sun, 19 May 2013 01:28:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-05-19:8e79a87e5908ee997aee9a298.html</guid><category>皇后问题</category></item><item><title>tieba sign</title><link>http://blog.junfeng.ca/tieba-sign.html</link><description>&lt;p&gt;贴吧批量签到&lt;/p&gt;
&lt;p&gt;使用requests,bs4&lt;/p&gt;
&lt;p&gt;[code language="python"]&lt;/p&gt;
&lt;p&gt;#!/usr/bin/env python&lt;br /&gt;
#!---coding=utf8---&lt;br /&gt;
import requests&lt;br /&gt;
import bs4&lt;/p&gt;
&lt;p&gt;urlt='http://tieba.baidu.com/f?kw='&lt;br /&gt;
signurl='http://tieba.baidu.com/sign/add'&lt;/p&gt;
&lt;p&gt;tieba=[]&lt;br /&gt;
f=open('tiebas.txt','r')&lt;br /&gt;
tieba=f.read().splitlines()&lt;br /&gt;
f.close()&lt;br /&gt;
headers={}&lt;br /&gt;
f=open('configs.txt','r')&lt;br /&gt;
for line in f:&lt;br /&gt;
if line[0]=='#':&lt;br /&gt;
continue&lt;br /&gt;
line=line.rstrip('\n')&lt;br /&gt;
key,value=line.split('=',1)&lt;br /&gt;
headers[key]=value&lt;br /&gt;
f.close()&lt;/p&gt;
&lt;p&gt;data={}&lt;br /&gt;
data['ie']='utf-8'&lt;/p&gt;
&lt;p&gt;for t in tieba:&lt;br /&gt;
data['kw']=t.decode('gbk').encode('utf-8')&lt;br /&gt;
#on linux&lt;br /&gt;
#data['kw']=t&lt;br /&gt;
#t=t.decode('utf-8').encode('gbk')&lt;br /&gt;
url=urlt+t&lt;br /&gt;
r=requests.get(url,headers=headers)  &lt;/p&gt;
&lt;p&gt;data['tbs']=bs4.BeautifulSoup(r.text).body.find('script').string.split('"')[1].encode('utf-8')&lt;br /&gt;
r=requests.post(signurl,headers=headers,data=data)&lt;br /&gt;
if r.url==signurl:&lt;br /&gt;
print t+'吧签到成功'.decode('utf-8').encode('gbk')&lt;br /&gt;
a=raw_input('Press Enter to exit:')&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;p&gt;使用PyInstaller打包成exe文件。&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href="http://pan.baidu.com/share/link?shareid=495612&amp;amp;uk=2887257007"&gt;文件&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Thu, 09 May 2013 17:22:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-05-09:tieba-sign.html</guid><category>贴吧</category></item><item><title>传话游戏</title><link>http://blog.junfeng.ca/e4bca0e8af9de6b8b8e6888f.html</link><description>&lt;div&gt;

非游戏规则，仅含代码．

&lt;/div&gt;

&lt;div&gt;

编程之美资格赛题一代码

&lt;/div&gt;

&lt;div&gt;

纯C++风格，那什么Ｃ风格弱暴了．

&lt;/div&gt;

&lt;div&gt;

大神轻拍．

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;p&gt;[code language="cpp"]&lt;/p&gt;
&lt;p&gt;#include\&amp;lt;iostream&gt;&lt;br /&gt;
#include\&amp;lt;string&gt;&lt;br /&gt;
#include\&amp;lt;map&gt;&lt;br /&gt;
#include\&amp;lt;vector&gt;&lt;br /&gt;
#include\&amp;lt;cstdio&gt;&lt;br /&gt;
using namespace std;&lt;br /&gt;
map\&amp;lt;string,string&gt; word_change;&lt;br /&gt;
vector\&amp;lt;string&gt; sentence;&lt;br /&gt;
void change()&lt;br /&gt;
{&lt;br /&gt;
for(vector\&amp;lt;string&gt;::iterator
be=sentence.begin();be!=sentence.end();++be)&lt;br /&gt;
{&lt;br /&gt;
if(word_change.count(*be)==0)&lt;br /&gt;
continue;&lt;br /&gt;
if(word_change.count(*be)==1)&lt;br /&gt;
*be=word_change[*be];&lt;br /&gt;
}&lt;br /&gt;
}&lt;br /&gt;
int main()&lt;br /&gt;
{&lt;br /&gt;
int T,N,M;&lt;br /&gt;
char en;&lt;br /&gt;
cin &gt;&gt; T;&lt;br /&gt;
string word,key,value;&lt;br /&gt;
for (int i=0 ;i!=T;++i)&lt;br /&gt;
{&lt;br /&gt;
cin &gt;&gt; N &gt;&gt; M;&lt;br /&gt;
for (int j=0;j!=M;++j)&lt;br /&gt;
{&lt;br /&gt;
cin &gt;&gt; key &gt;&gt; value;&lt;br /&gt;
word_change[key]=value;&lt;br /&gt;
}&lt;br /&gt;
while(cin &gt;&gt; word)&lt;br /&gt;
{&lt;/p&gt;
&lt;p&gt;sentence.push_back(word);&lt;br /&gt;
if((en=getchar())=='\n'|| en==EOF)&lt;br /&gt;
break;&lt;br /&gt;
}&lt;br /&gt;
for(int k=0;k!=N-1;k++)&lt;br /&gt;
change();&lt;br /&gt;
cout \&amp;lt;\&amp;lt; "Case #" \&amp;lt;\&amp;lt; i+1 \&amp;lt;\&amp;lt; ":";&lt;br /&gt;
for(vector\&amp;lt;string&gt;::iterator
be=sentence.begin();be!=sentence.end();++be)&lt;br /&gt;
cout \&amp;lt;\&amp;lt; " " \&amp;lt;\&amp;lt; *be ;&lt;br /&gt;
cout \&amp;lt;\&amp;lt; endl;&lt;br /&gt;
word_change.clear();&lt;br /&gt;
sentence.clear();&lt;br /&gt;
}&lt;br /&gt;
return 0;&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Sat, 06 Apr 2013 23:38:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-04-06:e4bca0e8af9de6b8b8e6888f.html</guid><category>传话游戏</category></item><item><title>Python２编码小结</title><link>http://blog.junfeng.ca/pythonefbc92e7bc96e7a081e5b08fe7bb93.html</link><description>&lt;p&gt;Python中的编码挺让人烦的．学习了一下，记录在此．首先查看你系统默认输入输出的编码．  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;#!/usr/bin/env python #!---coding=utf-8--- import sys print 'stdin_encoding:%s' % sys.stdin.encoding print 'stdout_encoding:%s' % sys.stdout.encoding&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;OutpUt&lt;br /&gt;
stdin_encoding:UTF-8&lt;br /&gt;
stdout_encoding:UTF-8&lt;br /&gt;
&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a='你好' &amp;gt;&amp;gt;&amp;gt; a 'xe4xbdxa0xe5xa5xbd' &amp;gt;&amp;gt;&amp;gt; type(a) &amp;lt;type 'str'&amp;gt; &amp;gt;&amp;gt;&amp;gt; b=a.decode('utf-8') &amp;gt;&amp;gt;&amp;gt; type(b) &amp;lt;type 'unicode'&amp;gt; &amp;gt;&amp;gt;&amp;gt; a.encode('gbk') Traceback (most recent call last): File "", line 1, in UnicodeDecodeError: 'ascii' codec can't decode byte 0xe4 in position 0: ordinal not in range(128)&lt;/code&gt;&lt;br /&gt;
首先a的类型是str，其以UTF-8编码．str有两个关于编码的方法．&lt;br /&gt;
str.encode和str.decode&lt;br /&gt;
b=a.decode('utf-8') 将a解码，返回类型为unicode.&lt;br /&gt;
同时a又有encode方法．但a.encode('gbk')
抛出了解码错误．那么encode方法又有什么用呢？？&lt;br /&gt;
看下面的例子：  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; c='Hello' &amp;gt;&amp;gt;&amp;gt; c 'Hello' &amp;gt;&amp;gt;&amp;gt; c.decode('utf-8') u'Hello' &amp;gt;&amp;gt;&amp;gt; d=c.decode('utf-8') &amp;gt;&amp;gt;&amp;gt; d u'Hello' &amp;gt;&amp;gt;&amp;gt; d.encode('gbk') 'Hello' &amp;gt;&amp;gt;&amp;gt; e=d.encode('gbk') &amp;gt;&amp;gt;&amp;gt; e 'Hello'&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;当str变量中只含有ascii字符时使用c.encode('gbk')顺利通过．我想c.encode()应该是先decode再encode的，而且默认是ascii来解码的．这样因为a中含有汉字，ascii也就无法解码了．  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; f=b.encode('gbk') &amp;gt;&amp;gt;&amp;gt; f 'xc4xe3xbaxc3' &amp;gt;&amp;gt;&amp;gt; g=f.decode('gbk') &amp;gt;&amp;gt;&amp;gt; g u'u4f60u597d' &amp;gt;&amp;gt;&amp;gt; g==b True &amp;gt;&amp;gt;&amp;gt; f.decode('utf-8') Traceback (most recent call last):   File "", line 1, in    File "/usr/lib/python2.7/encodings/utf_8.py", line 16, in decode     return codecs.utf_8_decode(input, errors, True) UnicodeDecodeError: 'utf8' codec can't decode byte 0xc4 in position 0: invalid continuation byte&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;从上面可以看出汉字在不同的编码下，码值是不同的，所以decode时就要传入正确的编码方式，不然就会抛出像上面这样的异常．&lt;/p&gt;
&lt;p&gt;在Python3中str取代了unicode类型，没有了decode方法．这样str类型的变量只能encode了，返回的是bytes类型．&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Tue, 12 Mar 2013 17:10:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-03-12:pythonefbc92e7bc96e7a081e5b08fe7bb93.html</guid><category>encode</category><category>Python</category></item><item><title>Linux和Nvidia显卡驱动</title><link>http://blog.junfeng.ca/linuxe5928cnvidiae698bee58da1e9a9b1e58aa8-2.html</link><description>&lt;p&gt;由于lxde也用了将近一学期了，虽说lxde比较轻量，但显示效果实在不能说美观！又不想用GNOME或者KDE之流.它们会携带一大堆莫名其妙的软件，也受不了arch下GNOME那个样子，至于KDE,比GNOME好不了哪去.而xfce4也是直追GNOME.于是再次忍不住装上Enlightenment17,上次因为感觉e17CPU占用太多，删了.但这次为了显示效果，下决心把e17装了.跟着网上的教程算是把它配置的满意了.&lt;br /&gt;
但风扇也呼呼的转了起来,top命令下去，果然，Enlightenment
CPU占用率百分之三十几，都是因为我的nvidia显卡没正常工作的缘故！而且貌似还在发热！你说你不工作去就算了，还拖累整个系统.BIOS中也没有关闭n卡的选项.无奈只有自食其力，上网搜解决方法.  &lt;/p&gt;
&lt;p&gt;貌似官方源里有nvidia驱动，但无奈nvidia-utility和mesa-libgl冲突,而后者被我系统里的大部分软件依赖.也就不敢装它了.然后用了aur中的bumblebee软件,但在装nvidia-bumblebee时无法安装，看wiki中说bbswitch可以关闭独显，但我也没装成功,bbswitch-git倒是装
成功了，却不工作！无奈我又去nvidia官网下载驱动，倒是没有依赖问题,但装好之后，X服务器又启动不了了.把由nvidia-xconfig自动生成在/etc/X11/Xorg.conf删了之后才能启动桌面环境！可能是我没配置好什么.于是狠心去装官方源中的n卡驱动，大概把我电脑里的桌面程序都给删了，装上后X还是启动不了，于是删了X,最小安装Xorg,问题依旧，查看X日志发现错误信息中有“Intel”关键字，于是明白要装xf86-video-intel
Intel集显的开源驱动，但它依赖mesa-libgl库，于是我明白怎么回事了：这是Intel和nvidia之间的矛盾.Fuck,可却害苦了我等
草民！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Sun, 10 Mar 2013 23:46:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-03-10:linuxe5928cnvidiae698bee58da1e9a9b1e58aa8-2.html</guid><category>瞎折腾</category></item><item><title>signal函数和sigaction函数</title><link>http://blog.junfeng.ca/signale587bde695b0e5928csigactione587bde695b0.html</link><description>&lt;p&gt;环境:Linux version 3.6.10-1-ARCH&lt;/p&gt;
&lt;p&gt;当使用系统自带signal函数处理信号时,系统并未把被捕捉到的信号加到信号屏蔽字中.&lt;/p&gt;
&lt;p&gt;使用sigaction函数实现的signal函数(apue),在调用信号处理程序时,捕捉到的信号屏蔽字被加入到信号屏蔽字,处理程序返回后,恢复到原来的屏蔽字.&lt;/p&gt;
&lt;p&gt;看来敲敲代码还是能发现一些东西的.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Sat, 16 Feb 2013 13:43:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-02-16:signale587bde695b0e5928csigactione587bde695b0.html</guid><category>signal</category></item><item><title>不是所有的https链接都是利民的</title><link>http://blog.junfeng.ca/e4b88de698afe68980e69c89e79a84httpse993bee68ea5e983bde698afe588a9e6b091e79a84.html</link><description>&lt;p&gt;话说git*hub又不能上了,开着代理,可以打开页面,但无法下载.&lt;/p&gt;
&lt;p&gt;git clone显示:&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #0000ff;"&gt;\$ git clone
https://github.com/bgolub/tornado-blog.git&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: #0000ff;"&gt; 正克隆到 'tornado-blog'...&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: #0000ff;"&gt; error: Could not resolve host: (nil);
Unknown error while accessing
https://github.com/bgolub/tornado-blog.git/info/refs?service=git-upload-pack&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: #0000ff;"&gt; fatal: HTTP request failed&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: #0000ff;"&gt;\$ ping github.com&lt;/span&gt;&lt;br /&gt;
&lt;span style="color: #0000ff;"&gt; \^C&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下载zip文件吧,又出现这种情况:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jcodef.com/wp-content/uploads/2013/02/2013-02-02-210744_1366x768_scrot.png"&gt;&lt;img alt="" src="http://jcodef.com/wp-content/uploads/2013/02/2013-02-02-210744_1366x768_scrot-300x168.png" title="2013-02-02-210744_1366x768_scrot" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我勒那个心情啊!让我们这些程序员情何以堪啊.&lt;/p&gt;
&lt;p&gt;最后把那个zip文件地址复制出来去掉url前面的https://,竟然成功了.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jcodef.com/wp-content/uploads/2013/02/2013-02-02-210744_1366x768_scrot1.png"&gt;&lt;img alt="" src="http://jcodef.com/wp-content/uploads/2013/02/2013-02-02-210744_1366x768_scrot1-300x168.png" title="2013-02-02-210744_1366x768_scrot" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;看来什么都是被逼出来的.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Sat, 02 Feb 2013 21:23:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-02-02:e4b88de698afe68980e69c89e79a84httpse993bee68ea5e983bde698afe588a9e6b091e79a84.html</guid><category>goagent</category><category>https</category></item><item><title>完美的goagent</title><link>http://blog.junfeng.ca/e5ae8ce7be8ee79a84goagent.html</link><description>&lt;p&gt;给我们这些没钱买vpn又想出去的人带来了很大的方便。&lt;/p&gt;
&lt;p&gt;chromium 设置-&gt;高级设置-&gt; 管理证书-&gt;授权中心-&gt;导入&lt;/p&gt;
&lt;p&gt;选择 goagent/local/CA.crt&lt;/p&gt;
&lt;p&gt;全部打勾，确定。&lt;/p&gt;
&lt;p&gt;ssl证书不受信任得到了解决。&lt;/p&gt;
&lt;p&gt;少部分要求证书的https也可以访问了。&lt;/p&gt;
&lt;p&gt;而在Android手机上，安装GaeProxy软件，打开，修改代理地址改成
https://yourappid.appspot.com/fetch.py&lt;/p&gt;
&lt;p&gt;Google+,facebook,twitter什么的，都可以访问了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Mon, 28 Jan 2013 17:30:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2013-01-28:e5ae8ce7be8ee79a84goagent.html</guid><category>goagent</category></item><item><title>捉虫记一</title><link>http://blog.junfeng.ca/e68d89e899abe8aea1e4b880.html</link><description>&lt;p&gt;话说今天机考了。最后一道题没过，伤心，最小生成树我以前编过的！但今天再编的时候，却出现了bug。&lt;/p&gt;
&lt;p&gt;BUG1.&lt;/p&gt;
&lt;div&gt;

    for(i=0;i\&lt;G.arcnum;i++)

&lt;/div&gt;

&lt;div&gt;

    {

&lt;/div&gt;

&lt;div&gt;

        scanf("%d%d%d",&amp;i,&amp;j,&amp;w);

&lt;/div&gt;

&lt;div&gt;

        G.a[i][j]=w;

&lt;/div&gt;

&lt;div&gt;

        G.a[j][i]=w;

&lt;/div&gt;

&lt;div&gt;

    }

&lt;/div&gt;

&lt;div&gt;

 i华丽丽的在我眼前突变了，神不知鬼不觉！

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

BUG2.

&lt;/div&gt;

&lt;div&gt;

&lt;div&gt;

&lt;div&gt;

int wp=INT\_MAX;

&lt;/div&gt;

&lt;div&gt;

......

&lt;/div&gt;

&lt;div&gt;

for(i=1;i\&lt;G.vexnum;++i)

&lt;/div&gt;

&lt;div&gt;

 {

&lt;/div&gt;

&lt;div&gt;

        wp=INT\_MAX;//此前未加

&lt;/div&gt;

&lt;div&gt;

        for(j=0;j\&lt;G.vexnum;++j)

&lt;/div&gt;

&lt;div&gt;

        {

&lt;/div&gt;

&lt;div&gt;

            if(closedge[j].lowcost!=0)

&lt;/div&gt;

&lt;div&gt;

            {

&lt;/div&gt;

&lt;div&gt;

                if(closedge[j].lowcost\&lt;wp)

&lt;/div&gt;

&lt;div&gt;

                {

&lt;/div&gt;

&lt;div&gt;

                    k=j;

&lt;/div&gt;

&lt;div&gt;

                    wp=closedge[j].lowcost;

&lt;/div&gt;

&lt;div&gt;

                }

&lt;/div&gt;

&lt;div&gt;

            }

&lt;/div&gt;

&lt;div&gt;

        }

&lt;/div&gt;

&lt;div&gt;

        ......

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;

带注释标记的那行没有加上，就出现了完全不一样的流程。

&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Sun, 23 Dec 2012 18:48:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2012-12-23:e68d89e899abe8aea1e4b880.html</guid><category>BUG</category></item><item><title>archlinux下android环境搭建</title><link>http://blog.junfeng.ca/archlinuxe4b88bandroide78eafe5a283e690ade5bbba.html</link><description>&lt;p&gt;由于系统中已有openjdk，就开始安装eclipse&lt;/p&gt;
&lt;p&gt;sudo pacman -S eclipse&lt;/p&gt;
&lt;p&gt;在选择java版本时纠结了，是选择sun-java呢，还是openjava？&lt;/p&gt;
&lt;p&gt;刚开始选择sun-java，但网速过于慢了，就又换回了openjava&lt;/p&gt;
&lt;p&gt;安装android-sdk，android-sdk-platform-tools无法解决依赖：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jcodef.com/wp-content/uploads/2012/12/2012-12-09-192629_740x485_scrot.png"&gt;&lt;img alt="" src="http://jcodef.com/wp-content/uploads/2012/12/2012-12-09-192629_740x485_scrot-300x196.png" title="2012-12-09-192629_740x485_scrot" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在/etc/pacman.conf中启用multilib源&lt;/p&gt;
&lt;p&gt;sudo vim /etc/pacman.conf&lt;/p&gt;
&lt;p&gt;安装android-sdk，android-sdk-platform-tools&lt;/p&gt;
&lt;p&gt;sudo pacman -S android-sdk android-sdk-platform-tools&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jcodef.com/wp-content/uploads/2012/12/2012-12-09-193119_737x460_scrot.png"&gt;&lt;img alt="" src="http://jcodef.com/wp-content/uploads/2012/12/2012-12-09-193119_737x460_scrot-300x187.png" title="2012-12-09-193119_737x460_scrot" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;感觉文件好大啊！但到后面装eclipse-android时真的是小巫见大巫了。&lt;/p&gt;
&lt;p&gt;android-sdk默认安装到/opt文件夹下。&lt;/p&gt;
&lt;p&gt;使用yaourt安装eclipse-android 使用pacman无法解决依赖。&lt;/p&gt;
&lt;p&gt;sudo yaourt  -S eclipse-android （非root用户也可以）&lt;/p&gt;
&lt;p&gt;会下载这三个东东eclipse-emf   eclipse-gef    eclipse-wtp-wst。&lt;/p&gt;
&lt;p&gt;平均每个都一百多M。&lt;/p&gt;
&lt;p&gt;cd /opt/android-sdk/tools&lt;/p&gt;
&lt;p&gt;运行android脚本启动android-sdk-manager：&lt;/p&gt;
&lt;p&gt;./android&lt;/p&gt;
&lt;p&gt;若遇到权限问题把/opt/android-sdk/文件夹及其所有内容的所有者改成你自己&lt;/p&gt;
&lt;p&gt;sudo chown -R user：users /opt/android-sdk&lt;/p&gt;
&lt;p&gt;sudo也可以。&lt;/p&gt;
&lt;p&gt;选择android API版本下载安装。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jcodef.com/wp-content/uploads/2012/12/2012-12-10-225726_668x470_scrot.png"&gt;&lt;img alt="" src="http://jcodef.com/wp-content/uploads/2012/12/2012-12-10-225726_668x470_scrot-300x211.png" title="2012-12-10-225726_668x470_scrot" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;启动eclipse，设置android-sdk路径。&lt;/p&gt;
&lt;p&gt;android开发环境已配置完成。&lt;/p&gt;
&lt;h6&gt;新建android虚拟机，测试环境：&lt;/h6&gt;
&lt;p&gt;在android-sdk-manager中找到tools-&gt;Manage AVDs，启动Android Virtual
Device Manager。&lt;/p&gt;
&lt;p&gt;new新建android虚拟机。&lt;/p&gt;
&lt;p&gt;设置参数&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jcodef.com/wp-content/uploads/2012/12/2012-12-10-223822_470x689_scrot.png"&gt;&lt;img alt="" src="http://jcodef.com/wp-content/uploads/2012/12/2012-12-10-223822_470x689_scrot-204x300.png" title="2012-12-10-223822_470x689_scrot" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Start启动虚拟机&lt;/p&gt;
&lt;p&gt;若出现问题无法启动，按照提示提供的执行命令。&lt;/p&gt;
&lt;p&gt;若出现“fork(): Cannot allocate memory”错误，把内存调小一点试试。&lt;/p&gt;
&lt;p&gt;启动过程较慢，以为死掉，造成关了重新启动多次。&lt;/p&gt;
&lt;p&gt;最后出现android虚拟机：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jcodef.com/wp-content/uploads/2012/12/2012-12-09-233805_1366x768_scrot.png"&gt;&lt;img alt="" src="http://jcodef.com/wp-content/uploads/2012/12/2012-12-09-233805_1366x768_scrot-300x168.png" title="2012-12-09-233805_1366x768_scrot" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;成功&lt;/p&gt;
&lt;p&gt;时间主要花在下载android-sdk和android-sdk-platform-tools上，学校源中无此软件包，只能在官网上下载，但官网已限速，而且多次出现下载完后，返回莫名错误。&lt;/p&gt;
&lt;p&gt;用yaourt下载eclipse-android依赖包时也是花费较多时间。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://wiki.archlinux.org/index.php/Android_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)"&gt;Android
(简体中文)&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Mon, 10 Dec 2012 22:56:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2012-12-10:archlinuxe4b88bandroide78eafe5a283e690ade5bbba.html</guid><category>android-sdk</category></item><item><title>gcc无法编译cpp文件</title><link>http://blog.junfeng.ca/gcce697a0e6b395e7bc96e8af91cppe69687e4bbb6.html</link><description>&lt;p&gt;[junfeng7@junfeng7 shortestpath]\$ gcc shortestpath.cpp  &lt;/p&gt;
&lt;p&gt;/tmp/ccsHwAHv.o:(.eh_frame+0x13)：对‘__gxx_personality_v0’未定义的引用&lt;br /&gt;
collect2: 错误：ld 返回 1&lt;/p&gt;
&lt;p&gt;google之：&lt;/p&gt;
&lt;p&gt;解决方法使用g++编译cpp文件。gcc不会帮你链接c++的运行库，但g++会。（&lt;a href="http://joanscut.blog.163.com/blog/static/2173596020072892740595/"&gt;来源&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;但我在ubuntu环境下，我记得gcc也成功链接了。换了个环境gcc也变脾气了。&lt;/p&gt;
&lt;p&gt;备忘&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Fri, 30 Nov 2012 17:49:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2012-11-30:gcce697a0e6b395e7bc96e8af91cppe69687e4bbb6.html</guid><category>编译cpp</category></item><item><title>图的最短路径</title><link>http://blog.junfeng.ca/e59bbee79a84e69c80e79fade8b7afe5be84.html</link><description>&lt;p&gt;迪杰斯特拉算法&lt;/p&gt;
&lt;div&gt;

-----------data.txt-----------

&lt;/div&gt;

&lt;div&gt;

&lt;div&gt;

6 8

&lt;/div&gt;

&lt;div&gt;

0 0 100 30 0 10

&lt;/div&gt;

&lt;div&gt;

0 0 0 0 0 5

&lt;/div&gt;

&lt;div&gt;

0 0 0 0 0 0

&lt;/div&gt;

&lt;div&gt;

0 0 60 0 20 0

&lt;/div&gt;

&lt;div&gt;

0 0 10 0 0 0

&lt;/div&gt;

&lt;div&gt;

0 0 0 0 50 0

&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;

----------code.cpp----------

&lt;/div&gt;

&lt;div&gt;

&lt;div&gt;

\#include\&lt;stdio.h\&gt;

&lt;/div&gt;

&lt;div&gt;

\#include\&lt;stdlib.h\&gt;

&lt;/div&gt;

&lt;div&gt;

\#include\&lt;limits.h\&gt;

&lt;/div&gt;

&lt;div&gt;

\#define Max\_vnum 50

&lt;/div&gt;

&lt;div&gt;

int final[Max\_vnum];

&lt;/div&gt;

&lt;div&gt;

int D[Max\_vnum];

&lt;/div&gt;

&lt;div&gt;

typedef struct Path{int adj;struct Path \*next;}Path;

&lt;/div&gt;

&lt;div&gt;

Path \*P[Max\_vnum];

&lt;/div&gt;

&lt;div&gt;

typedef struct {

&lt;/div&gt;

&lt;div&gt;

     int arc[Max\_vnum][Max\_vnum];

&lt;/div&gt;

&lt;div&gt;

     int vexnum,arcnum;

&lt;/div&gt;

&lt;div&gt;

}MGraph;

&lt;/div&gt;

&lt;div&gt;

void InitGraph(MGraph &amp;G)

&lt;/div&gt;

&lt;div&gt;

{

&lt;/div&gt;

&lt;div&gt;

     FILE \*fin;

&lt;/div&gt;

&lt;div&gt;

     int t;

&lt;/div&gt;

&lt;div&gt;

     fin=fopen("data.txt","r");

&lt;/div&gt;

&lt;div&gt;

     fscanf(fin,"%d%d",&amp;G.vexnum,&amp;G.arcnum);

&lt;/div&gt;

&lt;div&gt;

     for(int i=0;i\&lt;G.vexnum;++i)

&lt;/div&gt;

&lt;div&gt;

     {

&lt;/div&gt;

&lt;div&gt;

          for(int j=0;j\&lt;G.vexnum;++j)

&lt;/div&gt;

&lt;div&gt;

          {

&lt;/div&gt;

&lt;div&gt;

               fscanf(fin,"%d",&amp;t);

&lt;/div&gt;

&lt;div&gt;

               if(t==0)

&lt;/div&gt;

&lt;div&gt;

                    G.arc[i][j]=INT\_MAX;

&lt;/div&gt;

&lt;div&gt;

               else

&lt;/div&gt;

&lt;div&gt;

                    G.arc[i][j]=t;

&lt;/div&gt;

&lt;div&gt;

          }

&lt;/div&gt;

&lt;div&gt;

     }

&lt;/div&gt;

&lt;div&gt;

     return ;

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;div&gt;

void ShortestPath\_DIJ(MGraph G,int v0)

&lt;/div&gt;

&lt;div&gt;

{

&lt;/div&gt;

&lt;div&gt;

     int min,w,v,isend=-1;

&lt;/div&gt;

&lt;div&gt;

     Path \*p;

&lt;/div&gt;

&lt;div&gt;

     for(v=0;v\&lt;G.vexnum;++v)

&lt;/div&gt;

&lt;div&gt;

     {

&lt;/div&gt;

&lt;div&gt;

          final[v]=0;

&lt;/div&gt;

&lt;div&gt;

          D[v]=G.arc[v0][v];

&lt;/div&gt;

&lt;div&gt;

          P[v]=(Path\*)malloc(sizeof(Path));

&lt;/div&gt;

&lt;div&gt;

          P[v]-\&gt;next=NULL;

&lt;/div&gt;

&lt;div&gt;

          p=(Path\*)malloc(sizeof(Path));

&lt;/div&gt;

&lt;div&gt;

          p-\&gt;adj=v0;

&lt;/div&gt;

&lt;div&gt;

          p-\&gt;next=NULL;

&lt;/div&gt;

&lt;div&gt;

          P[v]-\&gt;next=p;

&lt;/div&gt;

&lt;div&gt;

     }

&lt;/div&gt;

&lt;div&gt;

     D[v0]=0;

&lt;/div&gt;

&lt;div&gt;

     final[v0]=1;

&lt;/div&gt;

&lt;div&gt;

     for(int i=1;i\&lt;G.vexnum;i++)

&lt;/div&gt;

&lt;div&gt;

     {

&lt;/div&gt;

&lt;div&gt;

          min=INT\_MAX;

&lt;/div&gt;

&lt;div&gt;

          for(w=0;w\&lt;G.vexnum;++w)

&lt;/div&gt;

&lt;div&gt;

               if(!final[w])

&lt;/div&gt;

&lt;div&gt;

                    if(D[w]\&lt;min)

&lt;/div&gt;

&lt;div&gt;

                    {

&lt;/div&gt;

&lt;div&gt;

                         min=D[w];

&lt;/div&gt;

&lt;div&gt;

                         v=w;

&lt;/div&gt;

&lt;div&gt;

                    }

&lt;/div&gt;

&lt;div&gt;

           if(isend==v)

&lt;/div&gt;

&lt;div&gt;

                break;

&lt;/div&gt;

&lt;div&gt;

          isend=v;

&lt;/div&gt;

&lt;div&gt;

          final[v]=1;

&lt;/div&gt;

&lt;div&gt;

          for(p=P[v]-\&gt;next;p-\&gt;next;p=p-\&gt;next)

&lt;/div&gt;

&lt;div&gt;

               printf("v%d",p-\&gt;adj)

&lt;/div&gt;

&lt;div&gt;

          printf("v%d",p-\&gt;adj);

&lt;/div&gt;

&lt;div&gt;

          Path \*p2;

&lt;/div&gt;

&lt;div&gt;

          p2=(Path\*)malloc(sizeof(Path));

&lt;/div&gt;

&lt;div&gt;

          p2-\&gt;adj=v;

&lt;/div&gt;

&lt;div&gt;

          p2-\&gt;next=NULL;

&lt;/div&gt;

&lt;div&gt;

          p-\&gt;next=p2;

&lt;/div&gt;

&lt;div&gt;

          printf("v%dn",v);

&lt;/div&gt;

&lt;div&gt;

          for(w=0;w\&lt;G.vexnum;++w)

&lt;/div&gt;

&lt;div&gt;

             
 if(!final[w]&amp;&amp;G.arc[v][w]!=INT\_MAX&amp;&amp;(min+G.arc[v][w]\&lt;D[w]))

&lt;/div&gt;

&lt;div&gt;

               {

&lt;/div&gt;

&lt;div&gt;

                    //printf("%d %d %d n",min,G.arc[v][w],D[w]);

&lt;/div&gt;

&lt;div&gt;

                    D[w]=min+G.arc[v][w];

&lt;/div&gt;

&lt;div&gt;

                    P[w]=P[v];

&lt;/div&gt;

&lt;div&gt;

               }

&lt;/div&gt;

&lt;div&gt;

     }

&lt;/div&gt;

&lt;div&gt;

     return ;

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;div&gt;

int main()

&lt;/div&gt;

&lt;div&gt;

{

&lt;/div&gt;

&lt;div&gt;

     MGraph G;

&lt;/div&gt;

&lt;div&gt;

     InitGraph(G);

&lt;/div&gt;

&lt;div&gt;

     ShortestPath\_DIJ(G,0);

&lt;/div&gt;

&lt;div&gt;

     getchar();

&lt;/div&gt;

&lt;div&gt;

     return 0;

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

----------Output----------

&lt;/div&gt;

&lt;div&gt;

&lt;div&gt;

v0v5

&lt;/div&gt;

&lt;div&gt;

v0v3

&lt;/div&gt;

&lt;div&gt;

v0v3v4

&lt;/div&gt;

&lt;div&gt;

v0v3v4v2

&lt;/div&gt;

&lt;div&gt;

算是打出正确结果了，改天再认真研究一下。

&lt;/div&gt;

&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Sat, 24 Nov 2012 00:56:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2012-11-24:e59bbee79a84e69c80e79fade8b7afe5be84.html</guid><category>图的最短路径</category></item><item><title>和archlinux初接触</title><link>http://blog.junfeng.ca/e5928carchlinuxe5889de68ea5e8a7a6.html</link><description>&lt;p&gt;我发现每隔一段时间都想装一下系统。今天在虚拟机里装了archlinux。用的是官方的livecd，确实是livecd，只是没有桌面环境而已。比较一下还是gentoo的livecd做的比较好，那叫一个漂亮，虽然它是最难装的。而arch的livecd就略显粗糙了，只有字符界面。由于是在virtualbox中装的，也就省了配置网络的步骤。直接分区，使用cgdisk把sda分成了两个区，一个做根，一个做home，格式化文件系统，挂载分区。然后设置好源，更新源。&lt;/p&gt;
&lt;p&gt;# pacstrap /mnt base base-devel ／mnt是你挂载的根分区目录。&lt;br /&gt;
# genfstab -p /mnt &gt;&gt; /mnt/etc/fstab
如果忘记这部，重启后文件系统会变成只读，不知道为什么。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# arch-chroot /mnt 若出现“chroot failed to run command /bin/sh&amp;#39; no such file or directory”

 则再依次键入上面三个命令，就不知道什么时候成功了。

一系列配置后，卸载livecd，重启，登录系统，默认只有字符界面，

#ping www.google.com 若出现unknow host，请继续使用livecd根据archlinux-wiki设置网络。

好像在由chroot进入新系统可能ping的通，但若不配置网络，直接重装好的系统启动，会无法联网（虚拟机选择的是NAT方式联网）。

设置好网络后，开始安装桌面环境。

首先安装X11

# pacman -S xorg-server xorg-xinit xorg-utils xorg-server-utils

我们学校的源总是差几M造成无法安装，

无奈在/etc/pacman.d/mirrorlist加上网易的源才算把X装上。

虚拟机不用装显卡驱动，又省了不少事。

安装输入设备驱动

# pacman -S xf86-input-synaptics （笔记本所需）

安装测试环境

# pacman -S xorg-twm xorg-xclock xterm

启动X 之前删除～／.xinitrc文件

startx

可以看到启动了一些窗口

exit关闭X。

然后苦难的日子就开始了。

#pacman -S gnome gnome-extra 安装gnome，全部都装了下来，占用900多M空间，

键入 vi ~/.xinitrc 创建.xinitrc文件 写入exec gnome-session

startx 如图

无法启动

#pacman -Rsn gnome 删除gnome环境

#pacman -S kde 安装kde，全装，占用1000多M

同样在.xinitc文件中写入 exec startkde 但X提示无法找到startkde

无奈安装openbox窗口管理器试试。

成功启动。

再装e17，没成功，源里没有。

然后装lxde ，xfce4都成功启动，但水平太低，不会配置，深感难看。

在这几个桌面环境，图形窗口都有同样的问题：

在浏览器中，鼠标无法滚动网页，两边都有黑框。

然后从中午一直折腾到现在，选修课也没去上。

再看gentoo livecd 真心叫一个漂亮。

各种桌面环境，软件都装的不少。

觉得自己水平太渣。

然后想把livecd直接复制到硬盘上，直接用。以为自己想到了一个好办法。

一搜索，发现还真行，有教程，是2007年的。

又要一段时间不折腾了。

参考：arch新手指南
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Thu, 22 Nov 2012 22:49:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2012-11-22:e5928carchlinuxe5889de68ea5e8a7a6.html</guid><category>arch安装</category></item><item><title>图的最小生成树</title><link>http://blog.junfeng.ca/e59bbee79a84e69c80e5b08fe7949fe68890e6a091.html</link><description>&lt;p&gt;普里姆算法&lt;/p&gt;
&lt;p&gt;----------data.txt-----------&lt;/p&gt;
&lt;div&gt;

&lt;div&gt;

6 10

&lt;/div&gt;

&lt;div&gt;

0 6 1 5 0 0

&lt;/div&gt;

&lt;div&gt;

6 0 5 0 3 0

&lt;/div&gt;

&lt;div&gt;

1 5 0 5 6 4

&lt;/div&gt;

&lt;div&gt;

5 0 5 0 0 2

&lt;/div&gt;

&lt;div&gt;

0 3 6 0 0 6

&lt;/div&gt;

&lt;div&gt;

0 0 4 2 6 0

&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;

----------code.cpp---------

&lt;/div&gt;

&lt;div&gt;

&lt;div&gt;

\#include\&lt;stdio.h\&gt;

&lt;/div&gt;

&lt;div&gt;

\#include\&lt;limits.h\&gt;

&lt;/div&gt;

&lt;div&gt;

\#include\&lt;stdlib.h\&gt;

&lt;/div&gt;

&lt;div&gt;

\#define Max\_vnum 50

&lt;/div&gt;

&lt;div&gt;

typedef struct {

&lt;/div&gt;

&lt;div&gt;

     int arcs[Max\_vnum][Max\_vnum];

&lt;/div&gt;

&lt;div&gt;

     int vexnum,arcnum;

&lt;/div&gt;

&lt;div&gt;

}MGraph;

&lt;/div&gt;

&lt;div&gt;

struct Closedge{int adjvex;int weight;};

&lt;/div&gt;

&lt;div&gt;

int weight=0;

&lt;/div&gt;

&lt;div&gt;

void InitGraph(MGraph &amp;G)

&lt;/div&gt;

&lt;div&gt;

{

&lt;/div&gt;

&lt;div&gt;

     FILE \*fin;

&lt;/div&gt;

&lt;div&gt;

     int t;

&lt;/div&gt;

&lt;div&gt;

     fin=fopen("data.txt","r");

&lt;/div&gt;

&lt;div&gt;

     fscanf(fin,"%d%d",&amp;G.vexnum,&amp;G.arcnum);

&lt;/div&gt;

&lt;div&gt;

     for(int i=0;i\&lt;G.vexnum;i++)

&lt;/div&gt;

&lt;div&gt;

     {

&lt;/div&gt;

&lt;div&gt;

          for(int j=0;j\&lt;G.vexnum;j++)

&lt;/div&gt;

&lt;div&gt;

          {

&lt;/div&gt;

&lt;div&gt;

               fscanf(fin,"%d",&amp;t);

&lt;/div&gt;

&lt;div&gt;

               if(t==0)

&lt;/div&gt;

&lt;div&gt;

                    G.arcs[i][j]=INT\_MAX;

&lt;/div&gt;

&lt;div&gt;

               else

&lt;/div&gt;

&lt;div&gt;

                    G.arcs[i][j]=t;

&lt;/div&gt;

&lt;div&gt;

          }

&lt;/div&gt;

&lt;div&gt;

     }

&lt;/div&gt;

&lt;div&gt;

     fclose(fin);

&lt;/div&gt;

&lt;div&gt;

     return ;

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;div&gt;

void MiniSpanTree\_PRIM(MGraph G,int u)

&lt;/div&gt;

&lt;div&gt;

{

&lt;/div&gt;

&lt;div&gt;

     struct Closedge closedge[Max\_vnum];

&lt;/div&gt;

&lt;div&gt;

     int i,j,k;

&lt;/div&gt;

&lt;div&gt;

     int t;

&lt;/div&gt;

&lt;div&gt;

     k=u;

&lt;/div&gt;

&lt;div&gt;

     for(j=0;j\&lt;G.vexnum;++j)

&lt;/div&gt;

&lt;div&gt;

     {

&lt;/div&gt;

&lt;div&gt;

          if(j!=k)

&lt;/div&gt;

&lt;div&gt;

          {

&lt;/div&gt;

&lt;div&gt;

               closedge[j].weight=G.arcs[k][j];

&lt;/div&gt;

&lt;div&gt;

               closedge[j].adjvex=u;

&lt;/div&gt;

&lt;div&gt;

          }

&lt;/div&gt;

&lt;div&gt;

     }

&lt;/div&gt;

&lt;div&gt;

     closedge[k].weight=0;

&lt;/div&gt;

&lt;div&gt;

    for(i=1;i\&lt;G.vexnum;++i)

&lt;/div&gt;

&lt;div&gt;

     {

&lt;/div&gt;

&lt;div&gt;

          t=INT\_MAX;

&lt;/div&gt;

&lt;div&gt;

          for(j=0;j\&lt;G.vexnum;++j)

&lt;/div&gt;

&lt;div&gt;

          {

&lt;/div&gt;

&lt;div&gt;

              if(closedge[j].weight!=0)

&lt;/div&gt;

&lt;div&gt;

               {

&lt;/div&gt;

&lt;div&gt;

                    if(t\&gt;closedge[j].weight)

&lt;/div&gt;

&lt;div&gt;

                    {

&lt;/div&gt;

&lt;div&gt;

                         t=closedge[j].weight;

&lt;/div&gt;

&lt;div&gt;

                         k=j;

&lt;/div&gt;

&lt;div&gt;

                    }

&lt;/div&gt;

&lt;div&gt;

               }

&lt;/div&gt;

&lt;div&gt;

          }

&lt;/div&gt;

&lt;div&gt;

          weight+=t;

&lt;/div&gt;

&lt;div&gt;

          printf("(v%d,v%d)n",closedge[k].adjvex+1,k+1);

&lt;/div&gt;

&lt;div&gt;

        closedge[k].weight=0;

&lt;/div&gt;

&lt;div&gt;

          for(j=0;j\&lt;G.vexnum;++j)

&lt;/div&gt;

&lt;div&gt;

          {

&lt;/div&gt;

&lt;div&gt;

               if(G.arcs[k][j]\&lt;closedge[j].weight)

&lt;/div&gt;

&lt;div&gt;

               {

&lt;/div&gt;

&lt;div&gt;

                    closedge[j].adjvex=k;

&lt;/div&gt;

&lt;div&gt;

                    closedge[j].weight=G.arcs[k][j];

&lt;/div&gt;

&lt;div&gt;

               }

&lt;/div&gt;

&lt;div&gt;

          }

&lt;/div&gt;

&lt;div&gt;

     }

&lt;/div&gt;

&lt;div&gt;

     return ;

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;div&gt;

int main()

&lt;/div&gt;

&lt;div&gt;

{

&lt;/div&gt;

&lt;div&gt;

     MGraph G;

&lt;/div&gt;

&lt;div&gt;

     InitGraph(G);

&lt;/div&gt;

&lt;div&gt;

     MiniSpanTree\_PRIM(G,0);

&lt;/div&gt;

&lt;div&gt;

     printf("weight=%dn",weight);

&lt;/div&gt;

&lt;div&gt;

     return 0;

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

------------------output----------------

&lt;/div&gt;

&lt;div&gt;

(v1,v3)  
(v3,v6)  
(v6,v4)  
(v3,v2)  
(v2,v5)  
weight=15

&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Sat, 17 Nov 2012 23:34:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2012-11-17:e59bbee79a84e69c80e5b08fe7949fe68890e6a091.html</guid><category>最小生成树</category></item><item><title>深度优先搜索图</title><link>http://blog.junfeng.ca/e6b7b1e5baa6e4bc98e58588e6909ce7b4a2e59bbe.html</link><description>&lt;p&gt;邻接矩阵&lt;/p&gt;
&lt;p&gt;------------data.txt-----------&lt;/p&gt;
&lt;div&gt;

&lt;div&gt;

7 12

&lt;/div&gt;

&lt;div&gt;

0 0 1 0 0 0 0

&lt;/div&gt;

&lt;div&gt;

1 0 0 0 0 0 0

&lt;/div&gt;

&lt;div&gt;

0 1 0 0 0 1 0

&lt;/div&gt;

&lt;div&gt;

0 1 1 0 1 0 0

&lt;/div&gt;

&lt;div&gt;

0 1 0 0 0 0 0

&lt;/div&gt;

&lt;div&gt;

0 0 0 1 0 0 0

&lt;/div&gt;

&lt;div&gt;

0 0 0 1 1 1 0

&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;

------------code.cpp----------

&lt;/div&gt;

&lt;div&gt;

&lt;div&gt;

\#include\&lt;stdio.h\&gt;

&lt;/div&gt;

&lt;div&gt;

\#include\&lt;stdlib.h\&gt;

&lt;/div&gt;

&lt;div&gt;

\#define Max\_vnum 50

&lt;/div&gt;

&lt;div&gt;

int visited[Max\_vnum];

&lt;/div&gt;

&lt;div&gt;

typedef struct {int vexnum,arcnum;int arcs[Max\_vnum][Max\_vnum];}Graph;

&lt;/div&gt;

&lt;div&gt;

void InitGraph(Graph &amp;G)

&lt;/div&gt;

&lt;div&gt;

{

&lt;/div&gt;

&lt;div&gt;

     FILE \*fin;

&lt;/div&gt;

&lt;div&gt;

     int i,j;

&lt;/div&gt;

&lt;div&gt;

     fin=fopen("data.txt","r");

&lt;/div&gt;

&lt;div&gt;

     fscanf(fin,"%d%d",&amp;G.vexnum,&amp;G.arcnum);

&lt;/div&gt;

&lt;div&gt;

     for(i=1;i\&lt;=G.vexnum;i++)

&lt;/div&gt;

&lt;div&gt;

          for(j=1;j\&lt;=G.vexnum;j++)

&lt;/div&gt;

&lt;div&gt;

               fscanf(fin,"%d",&amp;G.arcs[i][j]);

&lt;/div&gt;

&lt;div&gt;

     fclose(fin);

&lt;/div&gt;

&lt;div&gt;

     return ;

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;div&gt;

void DFS(Graph G,int v)

&lt;/div&gt;

&lt;div&gt;

{

&lt;/div&gt;

&lt;div&gt;

     int w=0;

&lt;/div&gt;

&lt;div&gt;

     visited[v]=1;

&lt;/div&gt;

&lt;div&gt;

     printf("%dn",v);

&lt;/div&gt;

&lt;div&gt;

     while(w\&lt;=G.vexnum&amp;&amp;!G.arcs[v][++w]);

&lt;/div&gt;

&lt;div&gt;

     while(w\&lt;=G.vexnum)

&lt;/div&gt;

&lt;div&gt;

     {

&lt;/div&gt;

&lt;div&gt;

          if(!visited[w])

&lt;/div&gt;

&lt;div&gt;

               DFS(G,w);

&lt;/div&gt;

&lt;div&gt;

        while(w\&lt;=G.vexnum&amp;&amp;!G.arcs[v][++w]);

&lt;/div&gt;

&lt;div&gt;

     }

&lt;/div&gt;

&lt;div&gt;

     return ;

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;div&gt;

void DFSTraverse(Graph G)

&lt;/div&gt;

&lt;div&gt;

{

&lt;/div&gt;

&lt;div&gt;

     for(int v=1;v\&lt;=G.vexnum;v++) visited[v]=0;

&lt;/div&gt;

&lt;div&gt;

     for(v=1;v\&lt;=G.vexnum;v++)

&lt;/div&gt;

&lt;div&gt;

     {

&lt;/div&gt;

&lt;div&gt;

          if(!visited[v])

&lt;/div&gt;

&lt;div&gt;

               DFS(G,v);

&lt;/div&gt;

&lt;div&gt;

     }

&lt;/div&gt;

&lt;div&gt;

     return ;

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;div&gt;

int main()

&lt;/div&gt;

&lt;div&gt;

{

&lt;/div&gt;

&lt;div&gt;

     Graph G;

&lt;/div&gt;

&lt;div&gt;

     InitGraph(G);

&lt;/div&gt;

&lt;div&gt;

     DFSTraverse(G);

&lt;/div&gt;

&lt;div&gt;

     return 0;

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;

邻接表

&lt;/div&gt;

&lt;div&gt;

----------data.txt-----------

&lt;/div&gt;

&lt;div&gt;

&lt;div&gt;

6 9

&lt;/div&gt;

&lt;div&gt;

0 1 20

&lt;/div&gt;

&lt;div&gt;

0 2 16

&lt;/div&gt;

&lt;div&gt;

1 4 13

&lt;/div&gt;

&lt;div&gt;

1 2 15

&lt;/div&gt;

&lt;div&gt;

1 5 28

&lt;/div&gt;

&lt;div&gt;

5 4 12

&lt;/div&gt;

&lt;div&gt;

4 3 12

&lt;/div&gt;

&lt;div&gt;

2 3 14

&lt;/div&gt;

&lt;div&gt;

5 3 12

&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;

---------code.cpp----------

&lt;/div&gt;

&lt;div&gt;

&lt;div&gt;

\#include\&lt;stdio.h\&gt;

&lt;/div&gt;

&lt;div&gt;

\#include\&lt;stdlib.h\&gt;

&lt;/div&gt;

&lt;div&gt;

\#define Max\_vnum 50

&lt;/div&gt;

&lt;div&gt;

int visited[Max\_vnum];

&lt;/div&gt;

&lt;div&gt;

typedef struct ArcNode{

&lt;/div&gt;

&lt;div&gt;

     int adjvex;

&lt;/div&gt;

&lt;div&gt;

     double weight;

&lt;/div&gt;

&lt;div&gt;

     struct ArcNode \*next;

&lt;/div&gt;

&lt;div&gt;

}ArcNode,\*AdjList[Max\_vnum];

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

typedef struct {

&lt;/div&gt;

&lt;div&gt;

     AdjList vertices;

&lt;/div&gt;

&lt;div&gt;

     int vexnum,arcnum;

&lt;/div&gt;

&lt;div&gt;

}ALGraph;

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

void InitGraph(ALGraph &amp;G)

&lt;/div&gt;

&lt;div&gt;

{

&lt;/div&gt;

&lt;div&gt;

        FILE \*fin;

&lt;/div&gt;

&lt;div&gt;

     int adjvex,index;

&lt;/div&gt;

&lt;div&gt;

     double weight;

&lt;/div&gt;

&lt;div&gt;

     ArcNode \*p,\*ptem[Max\_vnum];

&lt;/div&gt;

&lt;div&gt;

     fin=fopen("data.txt","r");

&lt;/div&gt;

&lt;div&gt;

     fscanf(fin,"%d%d",&amp;G.vexnum,&amp;G.arcnum);

&lt;/div&gt;

&lt;div&gt;

     for(int j=0;j\&lt;G.vexnum;j++)

&lt;/div&gt;

&lt;div&gt;

     {

&lt;/div&gt;

&lt;div&gt;

          G.vertices[j]=(ArcNode\*)malloc(sizeof(ArcNode));

&lt;/div&gt;

&lt;div&gt;

          G.vertices[j]-\&gt;next=NULL;

&lt;/div&gt;

&lt;div&gt;

          ptem[j]=G.vertices[j];

&lt;/div&gt;

&lt;div&gt;

     }

&lt;/div&gt;

&lt;div&gt;

        for(int i=0;i\&lt;G.arcnum;i++)

&lt;/div&gt;

&lt;div&gt;

     {

&lt;/div&gt;

&lt;div&gt;

          fscanf(fin,"%d%d%lf",&amp;adjvex,&amp;index,&amp;weight);

&lt;/div&gt;

&lt;div&gt;

                p=(ArcNode\*)malloc(sizeof(ArcNode));

&lt;/div&gt;

&lt;div&gt;

          p-\&gt;adjvex=adjvex;

&lt;/div&gt;

&lt;div&gt;

          p-\&gt;weight=weight;

&lt;/div&gt;

&lt;div&gt;

          p-\&gt;next=NULL;

&lt;/div&gt;

&lt;div&gt;

          ptem[index]-\&gt;next=p;

&lt;/div&gt;

&lt;div&gt;

          ptem[index]=p;

&lt;/div&gt;

&lt;div&gt;

     }

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

     fclose(fin);

&lt;/div&gt;

&lt;div&gt;

     return ;

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;div&gt;

void DFS(ALGraph G,int v)

&lt;/div&gt;

&lt;div&gt;

{

&lt;/div&gt;

&lt;div&gt;

     ArcNode \*p;

&lt;/div&gt;

&lt;div&gt;

     visited[v]=1;

&lt;/div&gt;

&lt;div&gt;

     printf("%d n",v);

&lt;/div&gt;

&lt;div&gt;

     p=G.vertices[v]-\&gt;next;

&lt;/div&gt;

&lt;div&gt;

     while(p!=NULL)

&lt;/div&gt;

&lt;div&gt;

     {

&lt;/div&gt;

&lt;div&gt;

          if(!visited[p-\&gt;adjvex])

&lt;/div&gt;

&lt;div&gt;

          {

&lt;/div&gt;

&lt;div&gt;

               printf("weight=%7.2lfn",p-\&gt;weight);

&lt;/div&gt;

&lt;div&gt;

               DFS(G,p-\&gt;adjvex);

&lt;/div&gt;

&lt;div&gt;

          }

&lt;/div&gt;

&lt;div&gt;

        p=p-\&gt;next;

&lt;/div&gt;

&lt;div&gt;

     }

&lt;/div&gt;

&lt;div&gt;

     return ;

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;div&gt;

void DFSTraverse(ALGraph G)

&lt;/div&gt;

&lt;div&gt;

{

&lt;/div&gt;

&lt;div&gt;

     for(int v=0;v\&lt;G.vexnum;v++) visited[v]=0;

&lt;/div&gt;

&lt;div&gt;

     for(v=0;v\&lt;G.vexnum;v++)

&lt;/div&gt;

&lt;div&gt;

     {

&lt;/div&gt;

&lt;div&gt;

          if(!visited[v])

&lt;/div&gt;

&lt;div&gt;

               DFS(G,v);

&lt;/div&gt;

&lt;div&gt;

     }

&lt;/div&gt;

&lt;div&gt;

     return ;

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;div&gt;

int main()

&lt;/div&gt;

&lt;div&gt;

{

&lt;/div&gt;

&lt;div&gt;

     ALGraph G;

&lt;/div&gt;

&lt;div&gt;

     InitGraph(G);

&lt;/div&gt;

&lt;div&gt;

     DFSTraverse(G);

&lt;/div&gt;

&lt;div&gt;

     return 0;

&lt;/div&gt;

&lt;div&gt;

}

&lt;/div&gt;

&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Fri, 16 Nov 2012 17:36:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2012-11-16:e6b7b1e5baa6e4bc98e58588e6909ce7b4a2e59bbe.html</guid><category>深度优先搜索</category></item><item><title>ubuntu 使用mentohust连接校园网</title><link>http://blog.junfeng.ca/ubuntu-e4bdbfe794a8mentohuste8bf9ee68ea5e6a0a1e59bade7bd91.html</link><description>&lt;p&gt;环境：XDU+Y470+分到静态IP&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题外话&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;突然间收到了静态IP，windows已无法联网，只好立即装linux，先装的DebianAMD64，启动时出现花屏，以为是版本的问题，重装成i386，依旧花屏，使用mentohust，成功联网，但显卡驱动没装好，显示影响基本浏览，然后nvidia官网下载闭源驱动，总是提示gcc版本不匹配，装成它要求的版本还是不成功。无奈换成ubuntuAMD64，显示正常，也连上了网，但重启后，又是无法联网。于是再换DebianAMD64，依旧花屏，且汉字显示为块状，......又换回ubuntu。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先下载mentohust（见附件）&lt;/p&gt;
&lt;p&gt;sudo tar zxf mentohust.tar.gz -C / 解压到根目录。&lt;/p&gt;
&lt;p&gt;cd /mentohust 进入mentohust目录&lt;/p&gt;
&lt;p&gt;chmod a+x install 加入可执行权限&lt;/p&gt;
&lt;p&gt;sudo ./install 安装&lt;/p&gt;
&lt;p&gt;sudo gedit /etc/mentohust.conf&lt;/p&gt;
&lt;p&gt;填入用户名 密码&lt;/p&gt;
&lt;p&gt;dns设置为114.114.114.114 保存&lt;/p&gt;
&lt;p&gt;为网卡配置静态IP地址&lt;/p&gt;
&lt;p&gt;编辑文件/etc/network/interfaces:&lt;/p&gt;
&lt;p&gt;sudo gdeit /etc/network/interfaces&lt;/p&gt;
&lt;p&gt;并用下面的行来替换有关eth0的行:&lt;/p&gt;
&lt;p&gt;# The primary network interface&lt;/p&gt;
&lt;p&gt;auto eth0&lt;/p&gt;
&lt;p&gt;iface eth0 inet static&lt;/p&gt;
&lt;p&gt;address IP地址&lt;/p&gt;
&lt;p&gt;gateway 网关&lt;/p&gt;
&lt;p&gt;netmask 子网掩码&lt;/p&gt;
&lt;p&gt;dns-nameservers 114.114.114.114&lt;/p&gt;
&lt;p&gt;保持和/etc/mentohust.conf 一致&lt;/p&gt;
&lt;p&gt;sudo /etc/init.d/networking restart 重启网络使配置生效。&lt;/p&gt;
&lt;p&gt;尽量不要在/etc/resolv.conf设置dns，每次重启后该文件都会被重置。&lt;/p&gt;
&lt;p&gt;然后 sudo mentohust，&lt;/p&gt;
&lt;p&gt;出现：&lt;/p&gt;
&lt;p&gt;认证成功!&lt;/p&gt;
&lt;p&gt;发送心跳包以保持在线...&lt;/p&gt;
&lt;p&gt;欢迎来到linux世界。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;a href="http://xdlinux.info/wiki/index.php/Linux%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91"&gt;linux连接校园网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;附件：&lt;a href="http://pan.baidu.com/share/link?shareid=114284&amp;amp;uk=2887257007"&gt;mentohust.tar.gz&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Wed, 31 Oct 2012 18:52:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2012-10-31:ubuntu-e4bdbfe794a8mentohuste8bf9ee68ea5e6a0a1e59bade7bd91.html</guid><category>mentohust</category><category>ubuntu</category></item><item><title>python创建子进程</title><link>http://blog.junfeng.ca/pythone5889be5bbbae5ad90e8bf9be7a88b.html</link><description>&lt;p&gt;在使用python的subprocess.Popen()创建的子进程死循环时，当设置shell=True时，使用subprocess.popen().kill()无法杀死子进程，然后换成&lt;/p&gt;
&lt;p&gt;os.kill(proc.pid,
signal.SIGKILL),同样无法杀死，郁闷纠结之。在kill()后加上wait(),防止僵尸进程，同样无法结束。看来不是加不加wait()的事情。于是加了一条print
"PID:%d" %
proc.pid(),打印出子进程PID,发现问题了，打印出的进程号，和top显示的不一样，总是相差1，&lt;/p&gt;
&lt;p&gt;RT&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jcodef.com/wp-content/uploads/2012/10/bug.png"&gt;&lt;img alt="" src="http://jcodef.com/wp-content/uploads/2012/10/bug-300x168.png" title="bug" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;于是把改成os.kill(proc.pid+1,signal.SIGKILL), 成功杀死子进程。&lt;/p&gt;
&lt;p&gt;于是很激动以为发现了python的bug，想着跟python社区发个邮件报告一下。&lt;/p&gt;
&lt;p&gt;当我查看subprocess的官方说明时，发现原来人家早有提示啊，&lt;/p&gt;
&lt;blockquote&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;Popen.pid&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The process ID of the child process.&lt;span
style="color: #ff0000;"&gt;Note that if you set the &lt;em&gt;shell&lt;/em&gt; argument
to &lt;code&gt;True&lt;/code&gt;, this is the process ID of the spawned shell.&lt;/span&gt;
&lt;/p&gt;
&lt;div&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;还是我看文档不够细心。&lt;span
style="color: #000000;"&gt;这句话的google翻译结果是：&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span
style="color: #000000;"&gt;“需要注意的是，如果你的shell参数设置为True，这是衍生shell的进程ID。”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;但为什么相差总是相差1呢？官方也没给出解释。&lt;/p&gt;
&lt;p&gt;于是去掉shell=True,kill(),和os.kill(pid,signal.SIGKILL)都能工作。&lt;/p&gt;
&lt;p&gt;最终源代码：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jcodef.com/wp-content/uploads/2012/10/Screenshot-from-2012-10-24-195604.png"&gt;&lt;img alt="" src="http://jcodef.com/wp-content/uploads/2012/10/Screenshot-from-2012-10-24-195604-300x215.png" title="Screenshot from 2012-10-24 19:56:04" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;helloworld.c测试代码：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jcodef.com/wp-content/uploads/2012/10/Screenshot-from-2012-10-24-195532.png"&gt;&lt;img alt="" src="http://jcodef.com/wp-content/uploads/2012/10/Screenshot-from-2012-10-24-195532-300x122.png" title="Screenshot from 2012-10-24 19:55:32" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要是因为自己看文档不够细心，同时早就应该尝试把shell=True去掉的。也不至于浪费那么长时间。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Wed, 24 Oct 2012 19:50:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2012-10-24:pythone5889be5bbbae5ad90e8bf9be7a88b.html</guid><category>subprocess</category></item><item><title>Python安装MySQLdb</title><link>http://blog.junfeng.ca/pythone5ae89e8a385mysqldb.html</link><description>&lt;p&gt;本来装的Python2.7.3，后来因为一些原因换成了2.5.2，而在今天装MySQLdb的时候出问题了。在该&lt;a href="http://www.djangoproject.com/r/python-mysql/"&gt;http://www.djangoproject.com/r/python-mysql/&lt;/a&gt;下下载MySQLdbWindows安装包，装完之后，在Python环境下import
 MySQLdb&lt;/p&gt;
&lt;p&gt;出错。然后上网搜，各种教程。都没解决，抱着试一下的态度，重新装了Python2.7.3，再重装MySQLdb，装的时候，识别出Python2.7，就明白弄对了。cmd-&gt;python
import MySQLdb 无异常抛出，成功。&lt;/p&gt;
&lt;p&gt;看来有时更新版本是必须的，这样能节省很多麻烦。但MySQLdb竟然不能识别低版本的Python解释器，这有何尝不是一个小bug呢！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Fri, 28 Sep 2012 00:02:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2012-09-28:pythone5ae89e8a385mysqldb.html</guid><category>MySQLdb安装</category></item><item><title>Django Template</title><link>http://blog.junfeng.ca/django-template.html</link><description>&lt;p&gt;跟着《The_Django_Book》敲代码，在第四章创建模版对象的时候遇到了问题，我按着书上的代码，敲了一遍又一遍，还是出错&lt;/p&gt;
&lt;p&gt;RT：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.jcodef.com/wp-content/uploads/2012/09/template1.jpg"&gt;&lt;img alt="" src="http://www.jcodef.com/wp-content/uploads/2012/09/template1-300x184.jpg" title="template1" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;出错信息提示环境变量未设置，然后赶紧把/site-packages/django加入环境变量，再运行，还是不对，但我记得昨天明明成功了，遂上网百度，然后了解到昨天我是从我建立的那个项目进入的，于是试验之，&lt;/p&gt;
&lt;p&gt;RT：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.jcodef.com/wp-content/uploads/2012/09/template2.jpg"&gt;&lt;img alt="" src="http://www.jcodef.com/wp-content/uploads/2012/09/template2-300x168.jpg" title="template2" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从manage.py 进入python的交互式界面，mysite/settings.py
会导入好所需程序的环境变量。然后python就不会抛出异常了&lt;/p&gt;
&lt;p&gt;哎！引以为鉴&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Thu, 27 Sep 2012 18:48:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2012-09-27:django-template.html</guid><category>Django_Template</category></item><item><title>python server.py</title><link>http://blog.junfeng.ca/python-server-py.html</link><description>&lt;p&gt;server.py源代码：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.jcodef.com/wp-content/uploads/2012/09/serverpy.jpg"&gt;&lt;img alt="" src="http://www.jcodef.com/wp-content/uploads/2012/09/serverpy-300x166.jpg" title="serverpy" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.jcodef.com/wp-content/uploads/2012/09/telnetpy.jpg"&gt;&lt;img alt="" src="http://www.jcodef.com/wp-content/uploads/2012/09/telnetpy.jpg" title="telnetpy" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过服务器实现和本机交互！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Fri, 21 Sep 2012 23:25:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2012-09-21:python-server-py.html</guid><category>python server</category></item><item><title>Debian下安装Google Chrome</title><link>http://blog.junfeng.ca/debiane4b88be5ae89e8a385google-chrome.html</link><description>&lt;p&gt;今天突然发现了一个小问题，wmaker下竟然没有一个可用的浏览器！自带的w3m实在过于奇葩，于是就在软件源里找可用的浏览器，可软件源今天也出问题了！不知怎么的竟然发现了我们学校的源没有公共许可密钥。于是开始自救。网上说在任意文件下新建个名为“key0x07DC563D1F41B907.asc”的文件。我建在home/下，键入命令：nano
key0x07DC563D1F41B907.asc&lt;/p&gt;
&lt;p&gt;输入以下内容：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-----BEGIN PGP PUBLIC KEY BLOCK-----&lt;br /&gt;
 Version: PGP Universal 2.0.3&lt;br /&gt;
 mQGiBDf3hHARBAC/pUIb79CHi2b1LdPI1pUgAMMVAcpLk+g+LRUcNnTVWrXBUkLv&lt;br /&gt;
 gjbraraA1jw728X7RE7BCqQc8TO2AkqZu4E16a4hFms58agPRtyXHcQMqRSBjkT2&lt;br /&gt;
 hXC73sO/nookcmtFNeiNSTTvrITcDabhs8rnVNYCJxpUm0yZBwnripzNlwCgl2OZ&lt;br /&gt;
 7W3M0hMahh/nPO/pqkQIO60D/RUoWs5bBZ0BAeTfUJpCjGpE0SiT/cryZSF9sKEx&lt;br /&gt;
 cPN135PURKVytofxc8bv2ZSd9v1CG+iO2JcmQ8ie7CD+qnub6AW9Uf6uFFfDpdgG&lt;br /&gt;
 2k2cZGoHMdiw6mnSb5fbvwCKgi9Nj3AOeDF7WcgFdQFLags28vfypL/RH2XhPfBe&lt;br /&gt;
 4EV+A/9TZ1Kxgk69dn3l5BGpwudmzHiD1142G7eZI1JlM4pJuOw6YY+NRDeVEbcF&lt;br /&gt;
 iP5diGZWdcoRYgwEEfLpgl7ok0ScRN3wPfZtmUl3GACsAZbxh06utkP2X3Lptopd&lt;br /&gt;
 PuoJhlKD6FpK99TDD34TWy76tBmigzm/CkLaTI4gawpWs5D89LQoQ2hyaXN0aWFu&lt;br /&gt;
 IE1hcmlsbGF0IDxtYXJpbGxhdEBkZWJpYW4ub3JnPohGBBARAgAGBQI9GPl1AAoJ&lt;br /&gt;
 ELed76p6J6DMsMwAn2/I4VYcMENSdO/FM+6Yb/1PGv+HAJ4zn+3i7Z+R/iDhx7c+&lt;br /&gt;
 luDpfBTe+IhGBBARAgAGBQI9GWSJAAoJELz2xg9ugWnSt6AAoJPHD0N6LnQMUZxv&lt;br /&gt;
 7MkcUIRE88CMAJwI5lVoJ0TCFHG/49pcjN7Lzbc1RohhBBMRAgAZBAsKBAMDFQMC&lt;br /&gt;
 AxYCAQIXgAUCQRiYygIZAQASB2VHUEcAAQEJEAfcVj0fQbkHn/IAmwahlSO4z8f3&lt;br /&gt;
 YToV+72CX6sWvkehAJ4q9zOytEMKy/Vk08w7h+3mOLR56IkBIgQQAQIADAUCQ7jd&lt;br /&gt;
 6AUDABJ1AAAKCRCXELibyletfNmOB/9V5AMQgN8WCxrToFjWf8aEN3v+6frpfUa/&lt;br /&gt;
 6u88J+31/6jGQI83lK1Kp9fIZQwA9JuZxT+hTwsmc6SiU3NnGQl8ZejupoJwvxex&lt;br /&gt;
 OPSB3CtzmhjB2VDNE5tU9yRq6Qpz9QNK0e4vl8pDvrUjkqHJH3VPz+ORYbPrsCHx&lt;br /&gt;
 afrIosI7alyjqv231i8mriOjFY5JDIXuj+xq4hMzGtFJOC4BNZWqtIH3tkFj2m/f&lt;br /&gt;
 l7SIwUa42YboT9IAfJ+ZVr2FZREOrXmVA9rDJPodAD8ComxS0VUWYxi85mE2KqPw&lt;br /&gt;
 HcARXGri10hmfSpiUBRH4snUZzJozEAgah5W/g/heSyiHYEGsPvtuQGNBDf3hM4Q&lt;br /&gt;
 BgCM2yVxcrBFgwUDOxbBqBbTEfYc5If3POLMRglvOuJ9/H1iEJ5Wk6+zcz21jxPa&lt;br /&gt;
 4FQrk2F/faGeRV1cy0A7qmibmQpvewJwgzeY7wOIulPYlAd23+VQPhN53GYVwO75&lt;br /&gt;
 GA1vst0tI26VRKscpt73PatCcykrgNWHWjvDKmDC4V2T+OFz4okOC1VYc9qfcVvH&lt;br /&gt;
 F1R3lgAnFBTObx49K1+UyGatvWiZTtofETDZ8aHzsd0ObJoLHHmmHye5bgE9yRLj&lt;br /&gt;
 5L8AAwUF/0L/TXmzjtJ3hmXC86OB7Vzqe/n8MVqWElq4OzzEXi0PxzbgLzcEN+KV&lt;br /&gt;
 o4iXaNZ2/oI79dLblYixS6wh/cG2XT6RTG1R1CiubmJXGiFn6xeAw5aiQTKZBjUi&lt;br /&gt;
 nXqFxR/ZtH4p8/ZAzk2SpAOEIp5Gqfg0OCxgHqWmNWR64vfPJKND6qcoQRQ8a+3V&lt;br /&gt;
 77xq0ZurHejwprjaUf7FHOK/u6lc8eW7JdCKisZ7efdGdu8QVFnmkpeHvyCyDpkC&lt;br /&gt;
 rc4mmetj4ohGBBgRAgAGBQI394TOAAoJEAfcVj0fQbkHp0QAnA3/HBLEhjAydk5n&lt;br /&gt;
 Z+PeV+Fxs+h8AJoDew5wFKb477LBOz0qyWxe+byZzg==&lt;br /&gt;
 =oDfT&lt;br /&gt;
 -----END PGP PUBLIC KEY BLOCK-----&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Crtl+o保存，Crtl+x退出nano。&lt;/p&gt;
&lt;p&gt;再在root下输入命令：apt-key add key0x07DC563D1F41B907.asc&lt;/p&gt;
&lt;p&gt;更新源，成功认证！&lt;/p&gt;
&lt;p&gt;但google，firefox，opera在源里都找不到！于是再次上网，由于对google的怀旧，就找装google
chrome的方法：&lt;/p&gt;
&lt;p&gt;nano /etc/apt/sources.list 打开源地址设置文件，追加google的源&lt;/p&gt;
&lt;p&gt;deb http://dl.google.com/linux/deb/ stable main&lt;/p&gt;
&lt;p&gt;同样要设置认证：&lt;/p&gt;
&lt;p&gt;输入：wget -q -O –
https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key
add -&lt;/p&gt;
&lt;p&gt;然后：apt-get update&lt;/p&gt;
&lt;p&gt;安装测试版：apt-get install google-chrome-beta&lt;/p&gt;
&lt;p&gt;不稳定版：apt-get install google-chrome-unstable&lt;/p&gt;
&lt;p&gt;不过貌似装下来比较大需要100多M的硬盘空间，这对爱惜内存、磁盘空间的linux用户可不算好。&lt;/p&gt;
&lt;p&gt;最后秀一下自己的劳动成果&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.jcodef.com/wp-content/uploads/2012/09/igc.jpg"&gt;&lt;img alt="" src="http://www.jcodef.com/wp-content/uploads/2012/09/igc-300x230.jpg" title="igc" /&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Fri, 21 Sep 2012 20:52:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2012-09-21:debiane4b88be5ae89e8a385google-chrome.html</guid><category>Debian装google chrome</category></item><item><title>Linux菜鸟瞎折腾</title><link>http://blog.junfeng.ca/linuxe88f9ce9b89fe79e8ee68a98e885be.html</link><description>&lt;p&gt;昨天在命令行下输入了aptitude
upgrade命令之后不知怎么的，linux内核竟然升级了，升级也挺好的，可关键是旧的版本也还存在。这样在开机时就出现了这种情况：&lt;br /&gt;
RT  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.jcodef.com/wp-content/uploads/2012/09/buhuo1.jpg"&gt;&lt;img alt="" src="http://www.jcodef.com/wp-content/uploads/2012/09/buhuo1.jpg" title="buhuo1" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后我就不爽了，本来一个内核就有两个选项：一个是图形界面，一个是命令行。现在又多了一个内核，也就有四个选项可以选择了。&lt;/p&gt;
&lt;p&gt;实在是看着不舒服，也就一个小小的虚拟机，看着貌似装了四个系统！&lt;/p&gt;
&lt;p&gt;于是就在ChinaUnix论坛询问，感谢网友们的热心回答，我知道了怎么删除那个旧内核的方法:&lt;/p&gt;
&lt;p&gt;在终端或命令行下输入：&lt;/p&gt;
&lt;p&gt;dpkg --get-selections|grep linux&lt;/p&gt;
&lt;p&gt;然后在root权限下输入：&lt;/p&gt;
&lt;p&gt;dpkg --purge --force-remove-essential linux-image-XXX&lt;/p&gt;
&lt;p&gt;XXX为要卸载的旧的版本号&lt;/p&gt;
&lt;p&gt;就这样，成功卸载了旧的linux内核&lt;/p&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.jcodef.com/wp-content/uploads/2012/09/buhuo2.jpg"&gt;&lt;img alt="" src="http://www.jcodef.com/wp-content/uploads/2012/09/buhuo2.jpg" title="buhuo2" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是前面还是有那个蓝色的画面。继续请教，得知;&lt;/p&gt;
&lt;p&gt;grub需要升级到grub2。&lt;/p&gt;
&lt;p&gt;我键入命令：&lt;/p&gt;
&lt;p&gt;upgrade-from-grub-legacy&lt;/p&gt;
&lt;p&gt;在让选择安装在哪个文件夹下的时候，我尝试了好几次，就是选不中，按enter键会提示你不装grub会怎么怎么。。。&lt;/p&gt;
&lt;p&gt;我想装上啊，可是选不中！没办法，我只好选否！然后就悲剧了！&lt;/p&gt;
&lt;p&gt;RT&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.jcodef.com/wp-content/uploads/2012/09/buhou3.jpg"&gt;&lt;img alt="" src="http://www.jcodef.com/wp-content/uploads/2012/09/buhou3.jpg" title="buhou3" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;没了操作系统启动程序，然后就Error了！&lt;/p&gt;
&lt;p&gt;我又向高手提问，可能是高手嫌我水平太次了，我也感觉很后悔！要是在服务器下，我这样的话那损失就大了！！&lt;/p&gt;
&lt;p&gt;于是我上网搜解决方法，可网上很多都是删除GRUB的方法！！我无奈，只好重装系统。最笨的一种方法！&lt;/p&gt;
&lt;p&gt;刚开始一切顺利，因为以前也装过几次，这次选的就是图形专家模式，可在选择linux内核版本的时候，我为了最求最新版，选了一个比较新的版本，可是快装成功的时候，竟然提示该内核版本不支持我的CPU，也多次退回去重新操作，可是还是没成功！&lt;/p&gt;
&lt;p&gt;万般无奈，再次重装，这次选的是普通模式（install），在装到选择APT源的时候，发现无法更改APT源，只能从国外的源里下载，十几K的速度，麻木的再次重启、重装。依旧是Install模式，这次选择不从网上下载软件，可是选择之后，进度条却不走了！&lt;/p&gt;
&lt;p&gt;心理哭着再次重装、这次还是坚持第一次的选择吧！选择Advanced-&gt;Graphic
Advanced Install，这次选择较低的linux版本 ，设置了学校的源，安装成功！！&lt;/p&gt;
&lt;p&gt;在安装的时候没选桌面环境，因为不想用默认的Gnome桌面管理环境。自己装了一个wmaker桌面环境，可是我水平比较菜，终端中文输出为乱码。也不知怎么解决，于是只好aptitude
install gnome，然后就装好了！弄了一下午啊&lt;/p&gt;
&lt;p&gt;秀秀自己的桌面，还不怎么会设置，比较难看。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.jcodef.com/wp-content/uploads/2012/09/buhuo4.jpg"&gt;&lt;img alt="" src="http://www.jcodef.com/wp-content/uploads/2012/09/buhuo4-300x229.jpg" title="buhuo4" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后得到了几个教训，在Debian linux下慎用aptitude
upgrade！不知道会出现什么东东！&lt;/p&gt;
&lt;p&gt;一定要养成做备份的习惯，关键时候会让你省很多力气的，&lt;/p&gt;
&lt;p&gt;不然有你哭的！&lt;/p&gt;
&lt;p&gt;当然“远离电脑，珍爱生命，没事不要瞎折腾！”是最好的了！！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Thu, 20 Sep 2012 23:37:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2012-09-20:linuxe88f9ce9b89fe79e8ee68a98e885be.html</guid><category>Debian安装</category></item><item><title>python-tornado起步</title><link>http://blog.junfeng.ca/python-tornadoe8b5b7e6ada5.html</link><description>&lt;p&gt;今天终于在linux、windows下把python tornado web server 搭建好了&lt;/p&gt;
&lt;p&gt;但在linux下编这个程序的时候发现通过不了（windows下可以通过）&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tornado.ioloop&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tornado.web&lt;/span&gt;

 &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;{style="padding-left: 30px;"}
def get(self):&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{style="padding-left: 60px;"}
self.write("Hello Python-Tornado！")&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;application = tornado.web.Application([ (r&amp;quot;/&amp;quot;, MainHandler), ])

 if __name__ == &amp;quot;__main__&amp;quot;:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;{style="padding-left: 30px;"}
 application.listen(8888)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{style="padding-left: 30px;"}
tornado.ioloop.IOLoop.instance().start()&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;按照这个代码敲，提示Application类无listen方法，然后又纠结了半天，

在网上看到了另一种写法，就改成了这样：

 linux下、windows下皆可通过！

可能还是linux下的tornado没装好！！

明天再研究！！
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Wed, 19 Sep 2012 00:01:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2012-09-19:python-tornadoe8b5b7e6ada5.html</guid><category>python-tornado</category></item><item><title>装Win PE的坎坷历程</title><link>http://blog.junfeng.ca/e8a385win-pee79a84e59d8ee59db7e58e86e7a88b.html</link><description>&lt;div&gt;

买了移动硬盘之后，慌着把数据转存过去。前几天，突然间想给硬盘装个U盘启动工具，我也知道装这个要格式化硬盘，可是硬盘上已经有了500多G的数据，实在不想再移出去，遂上网搜索如何在不格式化硬盘的前提下，装上Win
PE，网上说在移动硬盘下扩展一个新的分区就可以装了，我赶紧这样弄了，下了大白菜U盘启动制作工具，照例要格式化，我以为格式化的只是那个分区，下面就是一般步骤了，等我装完之后，模拟启动一下，没出现那个界面，然后重启电脑准备检测一下，在启动的过程中，电脑报警了几下，就自动关机了，这时已经很晚了，我也就睡觉了。

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

第二天，等我起来后，打开电脑发现，移动硬盘不能用了，盘符打不开了。实在是无奈，提示格式化，这时我就知道，我那500多G的数据多半是保不住了。但当时实在没办法，也就狠心格式化了，期望着通过数据恢复工具能恢复。格式化之后，赶紧找金山数据恢复工具，可现实和理想差距是如此之大，数据恢复工具理论上确实可以恢复我硬盘里的数据，可却不知要等上几年。也只有认命，心疼那些我下了一个学期的数据。

&lt;/div&gt;

&lt;div&gt;

&lt;/div&gt;

&lt;div&gt;

 但我还是没忘记我最初的目的：这次数据没了，装Win PE
就没后顾之忧了。我换另一个叫电脑店的U盘制作工具，却发现它不支持移动硬盘，再次换回大白菜，又把硬盘分了几个区，还设置了活动分区，这次装成功了，我高兴地把电脑从硬盘上启动了，然后发现桌面上有个分区工具，就想给硬盘分一下区，分了之后，我很是高兴，但发现电脑却无法从硬盘启动了，悲催了，硬盘再次被格式化了，刚装好的PE也没了。我还以为不会格式化呢，系统怎么会格式化自己的数据呢？可是我错了，原来从U盘启动后，Win
PE并不是运行在U盘上，而是运行在本机的硬盘上，所以，在Win
PE下U盘、移动硬盘都只是普通的存盘而已，当然可以把它格式化了。最后，又重新做了一个启动盘，带着空空的硬盘来到了学校。

&lt;/div&gt;

&lt;div&gt;

       经过这次意外，让我知道：买硬盘后一定要先装Win
PE。数据恢复工具是浮云。没事不要瞎折腾。呵呵

&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Sat, 01 Sep 2012 23:48:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2012-09-01:e8a385win-pee79a84e59d8ee59db7e58e86e7a88b.html</guid><category>U盘启动</category></item><item><title>浅解电脑掉线</title><link>http://blog.junfeng.ca/e6b585e8a7a3e68e89e7babf.html</link><description>&lt;p&gt;近日，研究起TCP/IP协议来了，话说那本《TCP/IP协议•卷一》真乃神书也，看的我是晕头雾里的！不过在我看那本书的时候，突然想起一个现象：我们都遇到过电脑不知怎么的突然掉线了的情况！这是为什么呢？看这本书的时候，大脑被刺激的突然想到一个可以解释的说法。&lt;/p&gt;
&lt;p&gt;以前刚接触电脑的时候，家里用的是拨号上网（那本书上叫SLIP），  &lt;/p&gt;
&lt;p&gt;开机时总要等一些时间才能连上网络。当时，不想等，遂请问高手，懂得手动设置一个IP地址，就能取消开机是要等的那段时间。果然这样上网速度快了很多。过不久，又经人提醒，明白手动设置IP地址的话，很容易被黑客攻击。这就相当于把你电脑在网络上的地址给公布了出去，如果网络遵循黑暗森林法则的话，这样不知死了多少次了！所幸，网络不处于黑暗森林状态，对于普通用户，黑客也不屑于去攻击。所以手动设置本机IP的人可以放心一些。&lt;/p&gt;
&lt;p&gt;那这件事又和网络掉线有什么关系呢？&lt;/p&gt;
&lt;p&gt;首先，A用户手动设置自己的本机IP后，假如是125.252.12.7，那么这个IP地址就变的特殊了。因为当A上线时，他的电脑一定会用这个IP地址的！。而当A下线后，这个IP是否还为A独有呢？当然不，网络运营商不可能这样浪费IP的，这样的话，这个IP就会被其他用户获取，作为他们电脑的地址。而掉线的发生，就是假如B的电脑在A不在线的情况下，获取了125.252.12.7这个IP，而当B玩地下城正玩得高兴的时候，这时A上线了，因为A把这个IP地址作为了他电脑的唯一地址，自然这个IP也就被A抢走了。而B的电脑就要重新获取新的IP，这样就造成B的电脑掉线了。&lt;/p&gt;
&lt;p&gt;假如在一个网段上有很多人，都手动设置了IP地址的话。那么自由的IP地址就会很少，因为IP地址始终是有限的。这样的话，掉线的情况就会经常发生在这个网络上。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Sat, 21 Jul 2012 21:31:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2012-07-21:e6b585e8a7a3e68e89e7babf.html</guid><category>电脑掉线</category></item><item><title>HTML新手之旅之表格</title><link>http://blog.junfeng.ca/htmle696b0e6898be4b98be69785e4b98be8a1a8e6a0bc.html</link><description>&lt;p&gt;做了一个很简单的课程表表格。&lt;/p&gt;
&lt;p&gt;html代码如下：&lt;/p&gt;
&lt;p&gt;\&amp;lt;html&gt;&lt;br /&gt;
\&amp;lt;body&gt;&lt;br /&gt;
\&amp;lt;p&gt;课堂练习:\&amp;lt;/p&gt;&lt;br /&gt;
\&amp;lt;table align="center" border="3px" width="500px" height="250px"
bordercolor="#35a2f3"&gt;&lt;br /&gt;
\&amp;lt;caption&gt;课程表 \&amp;lt;/caption&gt;&lt;br /&gt;
\&amp;lt;tr&gt;&lt;/p&gt;
&lt;p&gt;\&amp;lt;td&gt;项目\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td colspan="5"&gt;上课\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td colspan="2"&gt;休息\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;/tr&gt;&lt;br /&gt;
\&amp;lt;tr&gt;&lt;br /&gt;
\&amp;lt;td&gt;星期\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;星期一\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;星期二\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;星期三\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;星期四\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;星期五\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;星期六\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;星期日\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;/tr&gt;&lt;br /&gt;
\&amp;lt;tr&gt;&lt;br /&gt;
\&amp;lt;td rowspan="4"&gt;上午\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;语文\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;数学\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;英语\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;英语\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;物理\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;计算机\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td rowspan="4"&gt;休息\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;/tr&gt;&lt;br /&gt;
\&amp;lt;tr&gt;&lt;br /&gt;
\&amp;lt;td&gt;数学\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;数学\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;地理\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;历史\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;化学\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;计算机\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;/tr&gt;&lt;br /&gt;
\&amp;lt;tr&gt;&lt;br /&gt;
\&amp;lt;td&gt;化学\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;语文\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;体育\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;计算机\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;英语\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;计算机\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;/tr&gt;&lt;br /&gt;
\&amp;lt;tr&gt;&lt;br /&gt;
\&amp;lt;td&gt;政治\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;英语\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;体育\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;历史\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;地理\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;计算机\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;/tr&gt;&lt;br /&gt;
\&amp;lt;tr&gt;\&amp;lt;/tr&gt;&lt;br /&gt;
\&amp;lt;tr&gt;\&amp;lt;/tr&gt;&lt;br /&gt;
\&amp;lt;tr&gt;\&amp;lt;/tr&gt;&lt;br /&gt;
\&amp;lt;tr&gt;&lt;br /&gt;
\&amp;lt;td rowspan="2"&gt;下午\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;语文\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;数学\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;英语\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;英语\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;物理\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;计算机\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td rowspan="2"&gt;休息\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;/tr&gt;&lt;br /&gt;
\&amp;lt;tr&gt;&lt;br /&gt;
\&amp;lt;td&gt;数学\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;数学\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;地理\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;历史\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;化学\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;td&gt;计算机\&amp;lt;/td&gt;&lt;br /&gt;
\&amp;lt;/tr&gt;&lt;br /&gt;
\&amp;lt;/table&gt;&lt;br /&gt;
\&amp;lt;/body&gt;&lt;br /&gt;
\&amp;lt;/html&gt;&lt;/p&gt;
&lt;p&gt;效果如图：&lt;/p&gt;
&lt;table width="500px" border="3px" align="center"&gt;
&lt;caption&gt;
课程表

&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
项目

&lt;/td&gt;
&lt;td colspan="5"&gt;
上课

&lt;/td&gt;
&lt;td colspan="2"&gt;
休息

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
星期

&lt;/td&gt;
&lt;td&gt;
星期一

&lt;/td&gt;
&lt;td&gt;
星期二

&lt;/td&gt;
&lt;td&gt;
星期三

&lt;/td&gt;
&lt;td&gt;
星期四

&lt;/td&gt;
&lt;td&gt;
星期五

&lt;/td&gt;
&lt;td&gt;
星期六

&lt;/td&gt;
&lt;td&gt;
星期日

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td rowspan="4"&gt;
上午

&lt;/td&gt;
&lt;td&gt;
语文

&lt;/td&gt;
&lt;td&gt;
数学

&lt;/td&gt;
&lt;td&gt;
英语

&lt;/td&gt;
&lt;td&gt;
英语

&lt;/td&gt;
&lt;td&gt;
物理

&lt;/td&gt;
&lt;td&gt;
计算机

&lt;/td&gt;
&lt;td rowspan="4"&gt;
休息

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
数学

&lt;/td&gt;
&lt;td&gt;
数学

&lt;/td&gt;
&lt;td&gt;
地理

&lt;/td&gt;
&lt;td&gt;
历史

&lt;/td&gt;
&lt;td&gt;
化学

&lt;/td&gt;
&lt;td&gt;
计算机

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
化学

&lt;/td&gt;
&lt;td&gt;
语文

&lt;/td&gt;
&lt;td&gt;
体育

&lt;/td&gt;
&lt;td&gt;
计算机

&lt;/td&gt;
&lt;td&gt;
英语

&lt;/td&gt;
&lt;td&gt;
计算机

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
政治

&lt;/td&gt;
&lt;td&gt;
英语

&lt;/td&gt;
&lt;td&gt;
体育

&lt;/td&gt;
&lt;td&gt;
历史

&lt;/td&gt;
&lt;td&gt;
地理

&lt;/td&gt;
&lt;td&gt;
计算机

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td rowspan="2"&gt;
下午

&lt;/td&gt;
&lt;td&gt;
语文

&lt;/td&gt;
&lt;td&gt;
数学

&lt;/td&gt;
&lt;td&gt;
英语

&lt;/td&gt;
&lt;td&gt;
英语

&lt;/td&gt;
&lt;td&gt;
物理

&lt;/td&gt;
&lt;td&gt;
计算机

&lt;/td&gt;
&lt;td rowspan="2"&gt;
休息

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
数学

&lt;/td&gt;
&lt;td&gt;
数学

&lt;/td&gt;
&lt;td&gt;
地理

&lt;/td&gt;
&lt;td&gt;
历史

&lt;/td&gt;
&lt;td&gt;
化学

&lt;/td&gt;
&lt;td&gt;
计算机

&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">algu</dc:creator><pubDate>Sun, 08 Jul 2012 18:44:00 +0800</pubDate><guid>tag:blog.junfeng.ca,2012-07-08:htmle696b0e6898be4b98be69785e4b98be8a1a8e6a0bc.html</guid><category>html表格</category></item></channel></rss>